--
-- PostgreSQL database cluster dump
--

SET default_transaction_read_only = off;

SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;

--
-- Roles
--

CREATE ROLE anon;
ALTER ROLE anon WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE authenticated;
ALTER ROLE authenticated WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE authenticator;
ALTER ROLE authenticator WITH NOSUPERUSER NOINHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE dashboard_user;
ALTER ROLE dashboard_user WITH NOSUPERUSER INHERIT CREATEROLE CREATEDB NOLOGIN REPLICATION NOBYPASSRLS;
CREATE ROLE pgbouncer;
ALTER ROLE pgbouncer WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE pgsodium_keyholder;
ALTER ROLE pgsodium_keyholder WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE pgsodium_keyiduser;
ALTER ROLE pgsodium_keyiduser WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE pgsodium_keymaker;
ALTER ROLE pgsodium_keymaker WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE postgres;
ALTER ROLE postgres WITH NOSUPERUSER INHERIT CREATEROLE CREATEDB LOGIN REPLICATION BYPASSRLS;
CREATE ROLE service_role;
ALTER ROLE service_role WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION BYPASSRLS;
CREATE ROLE supabase_admin;
ALTER ROLE supabase_admin WITH SUPERUSER INHERIT CREATEROLE CREATEDB LOGIN REPLICATION BYPASSRLS;
CREATE ROLE supabase_auth_admin;
ALTER ROLE supabase_auth_admin WITH NOSUPERUSER NOINHERIT CREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE supabase_read_only_user;
ALTER ROLE supabase_read_only_user WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION BYPASSRLS;
CREATE ROLE supabase_realtime_admin;
ALTER ROLE supabase_realtime_admin WITH NOSUPERUSER NOINHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE supabase_replication_admin;
ALTER ROLE supabase_replication_admin WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN REPLICATION NOBYPASSRLS;
CREATE ROLE supabase_storage_admin;
ALTER ROLE supabase_storage_admin WITH NOSUPERUSER NOINHERIT CREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;

--
-- User Configurations
--

--
-- User Config "anon"
--

ALTER ROLE anon SET statement_timeout TO '3s';

--
-- User Config "authenticated"
--

ALTER ROLE authenticated SET statement_timeout TO '8s';

--
-- User Config "authenticator"
--

ALTER ROLE authenticator SET session_preload_libraries TO 'safeupdate';
ALTER ROLE authenticator SET statement_timeout TO '8s';
ALTER ROLE authenticator SET lock_timeout TO '8s';

--
-- User Config "postgres"
--

ALTER ROLE postgres SET search_path TO E'\\$user', 'public', 'extensions';

--
-- User Config "supabase_admin"
--

ALTER ROLE supabase_admin SET search_path TO '$user', 'public', 'auth', 'extensions';

--
-- User Config "supabase_auth_admin"
--

ALTER ROLE supabase_auth_admin SET search_path TO 'auth';
ALTER ROLE supabase_auth_admin SET idle_in_transaction_session_timeout TO '60000';

--
-- User Config "supabase_storage_admin"
--

ALTER ROLE supabase_storage_admin SET search_path TO 'storage';


--
-- Role memberships
--

GRANT anon TO authenticator GRANTED BY postgres;
GRANT anon TO postgres GRANTED BY supabase_admin;
GRANT authenticated TO authenticator GRANTED BY postgres;
GRANT authenticated TO postgres GRANTED BY supabase_admin;
GRANT authenticator TO supabase_storage_admin GRANTED BY supabase_admin;
GRANT pg_monitor TO postgres GRANTED BY supabase_admin;
GRANT pg_read_all_data TO postgres GRANTED BY supabase_admin;
GRANT pg_read_all_data TO supabase_read_only_user GRANTED BY postgres;
GRANT pg_signal_backend TO postgres GRANTED BY supabase_admin;
GRANT pgsodium_keyholder TO pgsodium_keymaker GRANTED BY supabase_admin;
GRANT pgsodium_keyholder TO postgres WITH ADMIN OPTION GRANTED BY supabase_admin;
GRANT pgsodium_keyholder TO service_role GRANTED BY supabase_admin;
GRANT pgsodium_keyiduser TO pgsodium_keyholder GRANTED BY supabase_admin;
GRANT pgsodium_keyiduser TO pgsodium_keymaker GRANTED BY supabase_admin;
GRANT pgsodium_keyiduser TO postgres WITH ADMIN OPTION GRANTED BY supabase_admin;
GRANT pgsodium_keymaker TO postgres WITH ADMIN OPTION GRANTED BY supabase_admin;
GRANT service_role TO authenticator GRANTED BY postgres;
GRANT service_role TO postgres GRANTED BY supabase_admin;
GRANT supabase_auth_admin TO postgres GRANTED BY supabase_admin;
GRANT supabase_realtime_admin TO postgres GRANTED BY supabase_admin;
GRANT supabase_storage_admin TO postgres GRANTED BY supabase_admin;






--
-- Databases
--

--
-- Database "template1" dump
--

\connect template1

--
-- PostgreSQL database dump
--

-- Dumped from database version 15.6
-- Dumped by pg_dump version 15.8 (Debian 15.8-1.pgdg120+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- PostgreSQL database dump complete
--

--
-- Database "postgres" dump
--

\connect postgres

--
-- PostgreSQL database dump
--

-- Dumped from database version 15.6
-- Dumped by pg_dump version 15.8 (Debian 15.8-1.pgdg120+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: auth; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA auth;


ALTER SCHEMA auth OWNER TO supabase_admin;

--
-- Name: extensions; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA extensions;


ALTER SCHEMA extensions OWNER TO postgres;

--
-- Name: graphql; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql;


ALTER SCHEMA graphql OWNER TO supabase_admin;

--
-- Name: graphql_public; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql_public;


ALTER SCHEMA graphql_public OWNER TO supabase_admin;

--
-- Name: pgbouncer; Type: SCHEMA; Schema: -; Owner: pgbouncer
--

CREATE SCHEMA pgbouncer;


ALTER SCHEMA pgbouncer OWNER TO pgbouncer;

--
-- Name: pgsodium; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA pgsodium;


ALTER SCHEMA pgsodium OWNER TO supabase_admin;

--
-- Name: pgsodium; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgsodium WITH SCHEMA pgsodium;


--
-- Name: EXTENSION pgsodium; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgsodium IS 'Pgsodium is a modern cryptography library for Postgres.';


--
-- Name: realtime; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA realtime;


ALTER SCHEMA realtime OWNER TO supabase_admin;

--
-- Name: storage; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA storage;


ALTER SCHEMA storage OWNER TO supabase_admin;

--
-- Name: vault; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA vault;


ALTER SCHEMA vault OWNER TO supabase_admin;

--
-- Name: pg_graphql; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_graphql WITH SCHEMA graphql;


--
-- Name: EXTENSION pg_graphql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_graphql IS 'pg_graphql: GraphQL support';


--
-- Name: pg_stat_statements; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_stat_statements WITH SCHEMA extensions;


--
-- Name: EXTENSION pg_stat_statements; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_stat_statements IS 'track planning and execution statistics of all SQL statements executed';


--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA extensions;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- Name: pgjwt; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgjwt WITH SCHEMA extensions;


--
-- Name: EXTENSION pgjwt; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgjwt IS 'JSON Web Token API for Postgresql';


--
-- Name: supabase_vault; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS supabase_vault WITH SCHEMA vault;


--
-- Name: EXTENSION supabase_vault; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION supabase_vault IS 'Supabase Vault Extension';


--
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA extensions;


--
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


--
-- Name: aal_level; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.aal_level AS ENUM (
    'aal1',
    'aal2',
    'aal3'
);


ALTER TYPE auth.aal_level OWNER TO supabase_auth_admin;

--
-- Name: code_challenge_method; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.code_challenge_method AS ENUM (
    's256',
    'plain'
);


ALTER TYPE auth.code_challenge_method OWNER TO supabase_auth_admin;

--
-- Name: factor_status; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_status AS ENUM (
    'unverified',
    'verified'
);


ALTER TYPE auth.factor_status OWNER TO supabase_auth_admin;

--
-- Name: factor_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_type AS ENUM (
    'totp',
    'webauthn',
    'phone'
);


ALTER TYPE auth.factor_type OWNER TO supabase_auth_admin;

--
-- Name: one_time_token_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.one_time_token_type AS ENUM (
    'confirmation_token',
    'reauthentication_token',
    'recovery_token',
    'email_change_token_new',
    'email_change_token_current',
    'phone_change_token'
);


ALTER TYPE auth.one_time_token_type OWNER TO supabase_auth_admin;

--
-- Name: action; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.action AS ENUM (
    'INSERT',
    'UPDATE',
    'DELETE',
    'TRUNCATE',
    'ERROR'
);


ALTER TYPE realtime.action OWNER TO supabase_admin;

--
-- Name: equality_op; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.equality_op AS ENUM (
    'eq',
    'neq',
    'lt',
    'lte',
    'gt',
    'gte',
    'in'
);


ALTER TYPE realtime.equality_op OWNER TO supabase_admin;

--
-- Name: user_defined_filter; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.user_defined_filter AS (
	column_name text,
	op realtime.equality_op,
	value text
);


ALTER TYPE realtime.user_defined_filter OWNER TO supabase_admin;

--
-- Name: wal_column; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_column AS (
	name text,
	type_name text,
	type_oid oid,
	value jsonb,
	is_pkey boolean,
	is_selectable boolean
);


ALTER TYPE realtime.wal_column OWNER TO supabase_admin;

--
-- Name: wal_rls; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_rls AS (
	wal jsonb,
	is_rls_enabled boolean,
	subscription_ids uuid[],
	errors text[]
);


ALTER TYPE realtime.wal_rls OWNER TO supabase_admin;

--
-- Name: email(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.email() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.email', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'email')
  )::text
$$;


ALTER FUNCTION auth.email() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION email(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.email() IS 'Deprecated. Use auth.jwt() -> ''email'' instead.';


--
-- Name: jwt(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.jwt() RETURNS jsonb
    LANGUAGE sql STABLE
    AS $$
  select 
    coalesce(
        nullif(current_setting('request.jwt.claim', true), ''),
        nullif(current_setting('request.jwt.claims', true), '')
    )::jsonb
$$;


ALTER FUNCTION auth.jwt() OWNER TO supabase_auth_admin;

--
-- Name: role(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.role() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.role', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'role')
  )::text
$$;


ALTER FUNCTION auth.role() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION role(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.role() IS 'Deprecated. Use auth.jwt() -> ''role'' instead.';


--
-- Name: uid(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.uid() RETURNS uuid
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.sub', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')
  )::uuid
$$;


ALTER FUNCTION auth.uid() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION uid(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.uid() IS 'Deprecated. Use auth.jwt() -> ''sub'' instead.';


--
-- Name: grant_pg_cron_access(); Type: FUNCTION; Schema: extensions; Owner: postgres
--

CREATE FUNCTION extensions.grant_pg_cron_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_cron'
  )
  THEN
    grant usage on schema cron to postgres with grant option;

    alter default privileges in schema cron grant all on tables to postgres with grant option;
    alter default privileges in schema cron grant all on functions to postgres with grant option;
    alter default privileges in schema cron grant all on sequences to postgres with grant option;

    alter default privileges for user supabase_admin in schema cron grant all
        on sequences to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on tables to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on functions to postgres with grant option;

    grant all privileges on all tables in schema cron to postgres with grant option;
    revoke all on table cron.job from postgres;
    grant select on table cron.job to postgres with grant option;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_cron_access() OWNER TO postgres;

--
-- Name: FUNCTION grant_pg_cron_access(); Type: COMMENT; Schema: extensions; Owner: postgres
--

COMMENT ON FUNCTION extensions.grant_pg_cron_access() IS 'Grants access to pg_cron';


--
-- Name: grant_pg_graphql_access(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.grant_pg_graphql_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
    func_is_graphql_resolve bool;
BEGIN
    func_is_graphql_resolve = (
        SELECT n.proname = 'resolve'
        FROM pg_event_trigger_ddl_commands() AS ev
        LEFT JOIN pg_catalog.pg_proc AS n
        ON ev.objid = n.oid
    );

    IF func_is_graphql_resolve
    THEN
        -- Update public wrapper to pass all arguments through to the pg_graphql resolve func
        DROP FUNCTION IF EXISTS graphql_public.graphql;
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language sql
        as $$
            select graphql.resolve(
                query := query,
                variables := coalesce(variables, '{}'),
                "operationName" := "operationName",
                extensions := extensions
            );
        $$;

        -- This hook executes when `graphql.resolve` is created. That is not necessarily the last
        -- function in the extension so we need to grant permissions on existing entities AND
        -- update default permissions to any others that are created after `graphql.resolve`
        grant usage on schema graphql to postgres, anon, authenticated, service_role;
        grant select on all tables in schema graphql to postgres, anon, authenticated, service_role;
        grant execute on all functions in schema graphql to postgres, anon, authenticated, service_role;
        grant all on all sequences in schema graphql to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on tables to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on functions to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on sequences to postgres, anon, authenticated, service_role;

        -- Allow postgres role to allow granting usage on graphql and graphql_public schemas to custom roles
        grant usage on schema graphql_public to postgres with grant option;
        grant usage on schema graphql to postgres with grant option;
    END IF;

END;
$_$;


ALTER FUNCTION extensions.grant_pg_graphql_access() OWNER TO supabase_admin;

--
-- Name: FUNCTION grant_pg_graphql_access(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.grant_pg_graphql_access() IS 'Grants access to pg_graphql';


--
-- Name: grant_pg_net_access(); Type: FUNCTION; Schema: extensions; Owner: postgres
--

CREATE FUNCTION extensions.grant_pg_net_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT 1
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_net'
  )
  THEN
    IF NOT EXISTS (
      SELECT 1
      FROM pg_roles
      WHERE rolname = 'supabase_functions_admin'
    )
    THEN
      CREATE USER supabase_functions_admin NOINHERIT CREATEROLE LOGIN NOREPLICATION;
    END IF;

    GRANT USAGE ON SCHEMA net TO supabase_functions_admin, postgres, anon, authenticated, service_role;

    ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;
    ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;

    ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;
    ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;

    REVOKE ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;
    REVOKE ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;

    GRANT EXECUTE ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
    GRANT EXECUTE ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_net_access() OWNER TO postgres;

--
-- Name: FUNCTION grant_pg_net_access(); Type: COMMENT; Schema: extensions; Owner: postgres
--

COMMENT ON FUNCTION extensions.grant_pg_net_access() IS 'Grants access to pg_net';


--
-- Name: pgrst_ddl_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_ddl_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  cmd record;
BEGIN
  FOR cmd IN SELECT * FROM pg_event_trigger_ddl_commands()
  LOOP
    IF cmd.command_tag IN (
      'CREATE SCHEMA', 'ALTER SCHEMA'
    , 'CREATE TABLE', 'CREATE TABLE AS', 'SELECT INTO', 'ALTER TABLE'
    , 'CREATE FOREIGN TABLE', 'ALTER FOREIGN TABLE'
    , 'CREATE VIEW', 'ALTER VIEW'
    , 'CREATE MATERIALIZED VIEW', 'ALTER MATERIALIZED VIEW'
    , 'CREATE FUNCTION', 'ALTER FUNCTION'
    , 'CREATE TRIGGER'
    , 'CREATE TYPE', 'ALTER TYPE'
    , 'CREATE RULE'
    , 'COMMENT'
    )
    -- don't notify in case of CREATE TEMP table or other objects created on pg_temp
    AND cmd.schema_name is distinct from 'pg_temp'
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_ddl_watch() OWNER TO supabase_admin;

--
-- Name: pgrst_drop_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_drop_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  obj record;
BEGIN
  FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()
  LOOP
    IF obj.object_type IN (
      'schema'
    , 'table'
    , 'foreign table'
    , 'view'
    , 'materialized view'
    , 'function'
    , 'trigger'
    , 'type'
    , 'rule'
    )
    AND obj.is_temporary IS false -- no pg_temp objects
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_drop_watch() OWNER TO supabase_admin;

--
-- Name: set_graphql_placeholder(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.set_graphql_placeholder() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
    DECLARE
    graphql_is_dropped bool;
    BEGIN
    graphql_is_dropped = (
        SELECT ev.schema_name = 'graphql_public'
        FROM pg_event_trigger_dropped_objects() AS ev
        WHERE ev.schema_name = 'graphql_public'
    );

    IF graphql_is_dropped
    THEN
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language plpgsql
        as $$
            DECLARE
                server_version float;
            BEGIN
                server_version = (SELECT (SPLIT_PART((select version()), ' ', 2))::float);

                IF server_version >= 14 THEN
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql extension is not enabled.'
                            )
                        )
                    );
                ELSE
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql is only available on projects running Postgres 14 onwards.'
                            )
                        )
                    );
                END IF;
            END;
        $$;
    END IF;

    END;
$_$;


ALTER FUNCTION extensions.set_graphql_placeholder() OWNER TO supabase_admin;

--
-- Name: FUNCTION set_graphql_placeholder(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.set_graphql_placeholder() IS 'Reintroduces placeholder function for graphql_public.graphql';


--
-- Name: get_auth(text); Type: FUNCTION; Schema: pgbouncer; Owner: postgres
--

CREATE FUNCTION pgbouncer.get_auth(p_usename text) RETURNS TABLE(username text, password text)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    RAISE WARNING 'PgBouncer auth request: %', p_usename;

    RETURN QUERY
    SELECT usename::TEXT, passwd::TEXT FROM pg_catalog.pg_shadow
    WHERE usename = p_usename;
END;
$$;


ALTER FUNCTION pgbouncer.get_auth(p_usename text) OWNER TO postgres;

--
-- Name: apply_rls(jsonb, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer DEFAULT (1024 * 1024)) RETURNS SETOF realtime.wal_rls
    LANGUAGE plpgsql
    AS $$
declare
-- Regclass of the table e.g. public.notes
entity_ regclass = (quote_ident(wal ->> 'schema') || '.' || quote_ident(wal ->> 'table'))::regclass;

-- I, U, D, T: insert, update ...
action realtime.action = (
    case wal ->> 'action'
        when 'I' then 'INSERT'
        when 'U' then 'UPDATE'
        when 'D' then 'DELETE'
        else 'ERROR'
    end
);

-- Is row level security enabled for the table
is_rls_enabled bool = relrowsecurity from pg_class where oid = entity_;

subscriptions realtime.subscription[] = array_agg(subs)
    from
        realtime.subscription subs
    where
        subs.entity = entity_;

-- Subscription vars
roles regrole[] = array_agg(distinct us.claims_role::text)
    from
        unnest(subscriptions) us;

working_role regrole;
claimed_role regrole;
claims jsonb;

subscription_id uuid;
subscription_has_access bool;
visible_to_subscription_ids uuid[] = '{}';

-- structured info for wal's columns
columns realtime.wal_column[];
-- previous identity values for update/delete
old_columns realtime.wal_column[];

error_record_exceeds_max_size boolean = octet_length(wal::text) > max_record_bytes;

-- Primary jsonb output for record
output jsonb;

begin
perform set_config('role', null, true);

columns =
    array_agg(
        (
            x->>'name',
            x->>'type',
            x->>'typeoid',
            realtime.cast(
                (x->'value') #>> '{}',
                coalesce(
                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                    (x->>'type')::regtype
                )
            ),
            (pks ->> 'name') is not null,
            true
        )::realtime.wal_column
    )
    from
        jsonb_array_elements(wal -> 'columns') x
        left join jsonb_array_elements(wal -> 'pk') pks
            on (x ->> 'name') = (pks ->> 'name');

old_columns =
    array_agg(
        (
            x->>'name',
            x->>'type',
            x->>'typeoid',
            realtime.cast(
                (x->'value') #>> '{}',
                coalesce(
                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                    (x->>'type')::regtype
                )
            ),
            (pks ->> 'name') is not null,
            true
        )::realtime.wal_column
    )
    from
        jsonb_array_elements(wal -> 'identity') x
        left join jsonb_array_elements(wal -> 'pk') pks
            on (x ->> 'name') = (pks ->> 'name');

for working_role in select * from unnest(roles) loop

    -- Update `is_selectable` for columns and old_columns
    columns =
        array_agg(
            (
                c.name,
                c.type_name,
                c.type_oid,
                c.value,
                c.is_pkey,
                pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
            )::realtime.wal_column
        )
        from
            unnest(columns) c;

    old_columns =
            array_agg(
                (
                    c.name,
                    c.type_name,
                    c.type_oid,
                    c.value,
                    c.is_pkey,
                    pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
                )::realtime.wal_column
            )
            from
                unnest(old_columns) c;

    if action <> 'DELETE' and count(1) = 0 from unnest(columns) c where c.is_pkey then
        return next (
            jsonb_build_object(
                'schema', wal ->> 'schema',
                'table', wal ->> 'table',
                'type', action
            ),
            is_rls_enabled,
            -- subscriptions is already filtered by entity
            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
            array['Error 400: Bad Request, no primary key']
        )::realtime.wal_rls;

    -- The claims role does not have SELECT permission to the primary key of entity
    elsif action <> 'DELETE' and sum(c.is_selectable::int) <> count(1) from unnest(columns) c where c.is_pkey then
        return next (
            jsonb_build_object(
                'schema', wal ->> 'schema',
                'table', wal ->> 'table',
                'type', action
            ),
            is_rls_enabled,
            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
            array['Error 401: Unauthorized']
        )::realtime.wal_rls;

    else
        output = jsonb_build_object(
            'schema', wal ->> 'schema',
            'table', wal ->> 'table',
            'type', action,
            'commit_timestamp', to_char(
                ((wal ->> 'timestamp')::timestamptz at time zone 'utc'),
                'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"'
            ),
            'columns', (
                select
                    jsonb_agg(
                        jsonb_build_object(
                            'name', pa.attname,
                            'type', pt.typname
                        )
                        order by pa.attnum asc
                    )
                from
                    pg_attribute pa
                    join pg_type pt
                        on pa.atttypid = pt.oid
                where
                    attrelid = entity_
                    and attnum > 0
                    and pg_catalog.has_column_privilege(working_role, entity_, pa.attname, 'SELECT')
            )
        )
        -- Add "record" key for insert and update
        || case
            when action in ('INSERT', 'UPDATE') then
                jsonb_build_object(
                    'record',
                    (
                        select
                            jsonb_object_agg(
                                -- if unchanged toast, get column name and value from old record
                                coalesce((c).name, (oc).name),
                                case
                                    when (c).name is null then (oc).value
                                    else (c).value
                                end
                            )
                        from
                            unnest(columns) c
                            full outer join unnest(old_columns) oc
                                on (c).name = (oc).name
                        where
                            coalesce((c).is_selectable, (oc).is_selectable)
                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                    )
                )
            else '{}'::jsonb
        end
        -- Add "old_record" key for update and delete
        || case
            when action = 'UPDATE' then
                jsonb_build_object(
                        'old_record',
                        (
                            select jsonb_object_agg((c).name, (c).value)
                            from unnest(old_columns) c
                            where
                                (c).is_selectable
                                and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                        )
                    )
            when action = 'DELETE' then
                jsonb_build_object(
                    'old_record',
                    (
                        select jsonb_object_agg((c).name, (c).value)
                        from unnest(old_columns) c
                        where
                            (c).is_selectable
                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                            and ( not is_rls_enabled or (c).is_pkey ) -- if RLS enabled, we can't secure deletes so filter to pkey
                    )
                )
            else '{}'::jsonb
        end;

        -- Create the prepared statement
        if is_rls_enabled and action <> 'DELETE' then
            if (select 1 from pg_prepared_statements where name = 'walrus_rls_stmt' limit 1) > 0 then
                deallocate walrus_rls_stmt;
            end if;
            execute realtime.build_prepared_statement_sql('walrus_rls_stmt', entity_, columns);
        end if;

        visible_to_subscription_ids = '{}';

        for subscription_id, claims in (
                select
                    subs.subscription_id,
                    subs.claims
                from
                    unnest(subscriptions) subs
                where
                    subs.entity = entity_
                    and subs.claims_role = working_role
                    and (
                        realtime.is_visible_through_filters(columns, subs.filters)
                        or action = 'DELETE'
                    )
        ) loop

            if not is_rls_enabled or action = 'DELETE' then
                visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
            else
                -- Check if RLS allows the role to see the record
                perform
                    -- Trim leading and trailing quotes from working_role because set_config
                    -- doesn't recognize the role as valid if they are included
                    set_config('role', trim(both '"' from working_role::text), true),
                    set_config('request.jwt.claims', claims::text, true);

                execute 'execute walrus_rls_stmt' into subscription_has_access;

                if subscription_has_access then
                    visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
                end if;
            end if;
        end loop;

        perform set_config('role', null, true);

        return next (
            output,
            is_rls_enabled,
            visible_to_subscription_ids,
            case
                when error_record_exceeds_max_size then array['Error 413: Payload Too Large']
                else '{}'
            end
        )::realtime.wal_rls;

    end if;
end loop;

perform set_config('role', null, true);
end;
$$;


ALTER FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) OWNER TO supabase_admin;

--
-- Name: build_prepared_statement_sql(text, regclass, realtime.wal_column[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) RETURNS text
    LANGUAGE sql
    AS $$
      /*
      Builds a sql string that, if executed, creates a prepared statement to
      tests retrive a row from *entity* by its primary key columns.
      Example
          select realtime.build_prepared_statement_sql('public.notes', '{"id"}'::text[], '{"bigint"}'::text[])
      */
          select
      'prepare ' || prepared_statement_name || ' as
          select
              exists(
                  select
                      1
                  from
                      ' || entity || '
                  where
                      ' || string_agg(quote_ident(pkc.name) || '=' || quote_nullable(pkc.value #>> '{}') , ' and ') || '
              )'
          from
              unnest(columns) pkc
          where
              pkc.is_pkey
          group by
              entity
      $$;


ALTER FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) OWNER TO supabase_admin;

--
-- Name: cast(text, regtype); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime."cast"(val text, type_ regtype) RETURNS jsonb
    LANGUAGE plpgsql IMMUTABLE
    AS $$
    declare
      res jsonb;
    begin
      execute format('select to_jsonb(%L::'|| type_::text || ')', val)  into res;
      return res;
    end
    $$;


ALTER FUNCTION realtime."cast"(val text, type_ regtype) OWNER TO supabase_admin;

--
-- Name: check_equality_op(realtime.equality_op, regtype, text, text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $$
      /*
      Casts *val_1* and *val_2* as type *type_* and check the *op* condition for truthiness
      */
      declare
          op_symbol text = (
              case
                  when op = 'eq' then '='
                  when op = 'neq' then '!='
                  when op = 'lt' then '<'
                  when op = 'lte' then '<='
                  when op = 'gt' then '>'
                  when op = 'gte' then '>='
                  when op = 'in' then '= any'
                  else 'UNKNOWN OP'
              end
          );
          res boolean;
      begin
          execute format(
              'select %L::'|| type_::text || ' ' || op_symbol
              || ' ( %L::'
              || (
                  case
                      when op = 'in' then type_::text || '[]'
                      else type_::text end
              )
              || ')', val_1, val_2) into res;
          return res;
      end;
      $$;


ALTER FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) OWNER TO supabase_admin;

--
-- Name: is_visible_through_filters(realtime.wal_column[], realtime.user_defined_filter[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$
    /*
    Should the record be visible (true) or filtered out (false) after *filters* are applied
    */
        select
            -- Default to allowed when no filters present
            $2 is null -- no filters. this should not happen because subscriptions has a default
            or array_length($2, 1) is null -- array length of an empty array is null
            or bool_and(
                coalesce(
                    realtime.check_equality_op(
                        op:=f.op,
                        type_:=coalesce(
                            col.type_oid::regtype, -- null when wal2json version <= 2.4
                            col.type_name::regtype
                        ),
                        -- cast jsonb to text
                        val_1:=col.value #>> '{}',
                        val_2:=f.value
                    ),
                    false -- if null, filter does not match
                )
            )
        from
            unnest(filters) f
            join unnest(columns) col
                on f.column_name = col.name;
    $_$;


ALTER FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) OWNER TO supabase_admin;

--
-- Name: list_changes(name, name, integer, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) RETURNS SETOF realtime.wal_rls
    LANGUAGE sql
    SET log_min_messages TO 'fatal'
    AS $$
      with pub as (
        select
          concat_ws(
            ',',
            case when bool_or(pubinsert) then 'insert' else null end,
            case when bool_or(pubupdate) then 'update' else null end,
            case when bool_or(pubdelete) then 'delete' else null end
          ) as w2j_actions,
          coalesce(
            string_agg(
              realtime.quote_wal2json(format('%I.%I', schemaname, tablename)::regclass),
              ','
            ) filter (where ppt.tablename is not null and ppt.tablename not like '% %'),
            ''
          ) w2j_add_tables
        from
          pg_publication pp
          left join pg_publication_tables ppt
            on pp.pubname = ppt.pubname
        where
          pp.pubname = publication
        group by
          pp.pubname
        limit 1
      ),
      w2j as (
        select
          x.*, pub.w2j_add_tables
        from
          pub,
          pg_logical_slot_get_changes(
            slot_name, null, max_changes,
            'include-pk', 'true',
            'include-transaction', 'false',
            'include-timestamp', 'true',
            'include-type-oids', 'true',
            'format-version', '2',
            'actions', pub.w2j_actions,
            'add-tables', pub.w2j_add_tables
          ) x
      )
      select
        xyz.wal,
        xyz.is_rls_enabled,
        xyz.subscription_ids,
        xyz.errors
      from
        w2j,
        realtime.apply_rls(
          wal := w2j.data::jsonb,
          max_record_bytes := max_record_bytes
        ) xyz(wal, is_rls_enabled, subscription_ids, errors)
      where
        w2j.w2j_add_tables <> ''
        and xyz.subscription_ids[1] is not null
    $$;


ALTER FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) OWNER TO supabase_admin;

--
-- Name: quote_wal2json(regclass); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.quote_wal2json(entity regclass) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $$
      select
        (
          select string_agg('' || ch,'')
          from unnest(string_to_array(nsp.nspname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
        )
        || '.'
        || (
          select string_agg('' || ch,'')
          from unnest(string_to_array(pc.relname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
          )
      from
        pg_class pc
        join pg_namespace nsp
          on pc.relnamespace = nsp.oid
      where
        pc.oid = entity
    $$;


ALTER FUNCTION realtime.quote_wal2json(entity regclass) OWNER TO supabase_admin;

--
-- Name: subscription_check_filters(); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.subscription_check_filters() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    /*
    Validates that the user defined filters for a subscription:
    - refer to valid columns that the claimed role may access
    - values are coercable to the correct column type
    */
    declare
        col_names text[] = coalesce(
                array_agg(c.column_name order by c.ordinal_position),
                '{}'::text[]
            )
            from
                information_schema.columns c
            where
                format('%I.%I', c.table_schema, c.table_name)::regclass = new.entity
                and pg_catalog.has_column_privilege(
                    (new.claims ->> 'role'),
                    format('%I.%I', c.table_schema, c.table_name)::regclass,
                    c.column_name,
                    'SELECT'
                );
        filter realtime.user_defined_filter;
        col_type regtype;

        in_val jsonb;
    begin
        for filter in select * from unnest(new.filters) loop
            -- Filtered column is valid
            if not filter.column_name = any(col_names) then
                raise exception 'invalid column for filter %', filter.column_name;
            end if;

            -- Type is sanitized and safe for string interpolation
            col_type = (
                select atttypid::regtype
                from pg_catalog.pg_attribute
                where attrelid = new.entity
                      and attname = filter.column_name
            );
            if col_type is null then
                raise exception 'failed to lookup type for column %', filter.column_name;
            end if;

            -- Set maximum number of entries for in filter
            if filter.op = 'in'::realtime.equality_op then
                in_val = realtime.cast(filter.value, (col_type::text || '[]')::regtype);
                if coalesce(jsonb_array_length(in_val), 0) > 100 then
                    raise exception 'too many values for `in` filter. Maximum 100';
                end if;
            else
                -- raises an exception if value is not coercable to type
                perform realtime.cast(filter.value, col_type);
            end if;

        end loop;

        -- Apply consistent order to filters so the unique constraint on
        -- (subscription_id, entity, filters) can't be tricked by a different filter order
        new.filters = coalesce(
            array_agg(f order by f.column_name, f.op, f.value),
            '{}'
        ) from unnest(new.filters) f;

        return new;
    end;
    $$;


ALTER FUNCTION realtime.subscription_check_filters() OWNER TO supabase_admin;

--
-- Name: to_regrole(text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.to_regrole(role_name text) RETURNS regrole
    LANGUAGE sql IMMUTABLE
    AS $$ select role_name::regrole $$;


ALTER FUNCTION realtime.to_regrole(role_name text) OWNER TO supabase_admin;

--
-- Name: topic(); Type: FUNCTION; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE FUNCTION realtime.topic() RETURNS text
    LANGUAGE sql STABLE
    AS $$
select nullif(current_setting('realtime.topic', true), '')::text;
$$;


ALTER FUNCTION realtime.topic() OWNER TO supabase_realtime_admin;

--
-- Name: can_insert_object(text, text, uuid, jsonb); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  INSERT INTO "storage"."objects" ("bucket_id", "name", "owner", "metadata") VALUES (bucketid, name, owner, metadata);
  -- hack to rollback the successful insert
  RAISE sqlstate 'PT200' using
  message = 'ROLLBACK',
  detail = 'rollback successful insert';
END
$$;


ALTER FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) OWNER TO supabase_storage_admin;

--
-- Name: extension(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.extension(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
_filename text;
BEGIN
	select string_to_array(name, '/') into _parts;
	select _parts[array_length(_parts,1)] into _filename;
	-- @todo return the last part instead of 2
	return reverse(split_part(reverse(_filename), '.', 1));
END
$$;


ALTER FUNCTION storage.extension(name text) OWNER TO supabase_storage_admin;

--
-- Name: filename(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.filename(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[array_length(_parts,1)];
END
$$;


ALTER FUNCTION storage.filename(name text) OWNER TO supabase_storage_admin;

--
-- Name: foldername(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.foldername(name text) RETURNS text[]
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[1:array_length(_parts,1)-1];
END
$$;


ALTER FUNCTION storage.foldername(name text) OWNER TO supabase_storage_admin;

--
-- Name: get_size_by_bucket(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.get_size_by_bucket() RETURNS TABLE(size bigint, bucket_id text)
    LANGUAGE plpgsql
    AS $$
BEGIN
    return query
        select sum((metadata->>'size')::int) as size, obj.bucket_id
        from "storage".objects as obj
        group by obj.bucket_id;
END
$$;


ALTER FUNCTION storage.get_size_by_bucket() OWNER TO supabase_storage_admin;

--
-- Name: list_multipart_uploads_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, next_key_token text DEFAULT ''::text, next_upload_token text DEFAULT ''::text) RETURNS TABLE(key text, id text, created_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(key COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                        substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1)))
                    ELSE
                        key
                END AS key, id, created_at
            FROM
                storage.s3_multipart_uploads
            WHERE
                bucket_id = $5 AND
                key ILIKE $1 || ''%'' AND
                CASE
                    WHEN $4 != '''' AND $6 = '''' THEN
                        CASE
                            WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                                substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                key COLLATE "C" > $4
                            END
                    ELSE
                        true
                END AND
                CASE
                    WHEN $6 != '''' THEN
                        id COLLATE "C" > $6
                    ELSE
                        true
                    END
            ORDER BY
                key COLLATE "C" ASC, created_at ASC) as e order by key COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_key_token, bucket_id, next_upload_token;
END;
$_$;


ALTER FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, next_key_token text, next_upload_token text) OWNER TO supabase_storage_admin;

--
-- Name: list_objects_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, start_after text DEFAULT ''::text, next_token text DEFAULT ''::text) RETURNS TABLE(name text, id uuid, metadata jsonb, updated_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(name COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                        substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1)))
                    ELSE
                        name
                END AS name, id, metadata, updated_at
            FROM
                storage.objects
            WHERE
                bucket_id = $5 AND
                name ILIKE $1 || ''%'' AND
                CASE
                    WHEN $6 != '''' THEN
                    name COLLATE "C" > $6
                ELSE true END
                AND CASE
                    WHEN $4 != '''' THEN
                        CASE
                            WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                                substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                name COLLATE "C" > $4
                            END
                    ELSE
                        true
                END
            ORDER BY
                name COLLATE "C" ASC) as e order by name COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_token, bucket_id, start_after;
END;
$_$;


ALTER FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, start_after text, next_token text) OWNER TO supabase_storage_admin;

--
-- Name: operation(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.operation() RETURNS text
    LANGUAGE plpgsql STABLE
    AS $$
BEGIN
    RETURN current_setting('storage.operation', true);
END;
$$;


ALTER FUNCTION storage.operation() OWNER TO supabase_storage_admin;

--
-- Name: search(text, text, integer, integer, integer, text, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.search(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text) RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)
    LANGUAGE plpgsql STABLE
    AS $_$
declare
  v_order_by text;
  v_sort_order text;
begin
  case
    when sortcolumn = 'name' then
      v_order_by = 'name';
    when sortcolumn = 'updated_at' then
      v_order_by = 'updated_at';
    when sortcolumn = 'created_at' then
      v_order_by = 'created_at';
    when sortcolumn = 'last_accessed_at' then
      v_order_by = 'last_accessed_at';
    else
      v_order_by = 'name';
  end case;

  case
    when sortorder = 'asc' then
      v_sort_order = 'asc';
    when sortorder = 'desc' then
      v_sort_order = 'desc';
    else
      v_sort_order = 'asc';
  end case;

  v_order_by = v_order_by || ' ' || v_sort_order;

  return query execute
    'with folders as (
       select path_tokens[$1] as folder
       from storage.objects
         where objects.name ilike $2 || $3 || ''%''
           and bucket_id = $4
           and array_length(objects.path_tokens, 1) <> $1
       group by folder
       order by folder ' || v_sort_order || '
     )
     (select folder as "name",
            null as id,
            null as updated_at,
            null as created_at,
            null as last_accessed_at,
            null as metadata from folders)
     union all
     (select path_tokens[$1] as "name",
            id,
            updated_at,
            created_at,
            last_accessed_at,
            metadata
     from storage.objects
     where objects.name ilike $2 || $3 || ''%''
       and bucket_id = $4
       and array_length(objects.path_tokens, 1) = $1
     order by ' || v_order_by || ')
     limit $5
     offset $6' using levels, prefix, search, bucketname, limits, offsets;
end;
$_$;


ALTER FUNCTION storage.search(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) OWNER TO supabase_storage_admin;

--
-- Name: update_updated_at_column(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.update_updated_at_column() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW; 
END;
$$;


ALTER FUNCTION storage.update_updated_at_column() OWNER TO supabase_storage_admin;

--
-- Name: secrets_encrypt_secret_secret(); Type: FUNCTION; Schema: vault; Owner: supabase_admin
--

CREATE FUNCTION vault.secrets_encrypt_secret_secret() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
		BEGIN
		        new.secret = CASE WHEN new.secret IS NULL THEN NULL ELSE
			CASE WHEN new.key_id IS NULL THEN NULL ELSE pg_catalog.encode(
			  pgsodium.crypto_aead_det_encrypt(
				pg_catalog.convert_to(new.secret, 'utf8'),
				pg_catalog.convert_to((new.id::text || new.description::text || new.created_at::text || new.updated_at::text)::text, 'utf8'),
				new.key_id::uuid,
				new.nonce
			  ),
				'base64') END END;
		RETURN new;
		END;
		$$;


ALTER FUNCTION vault.secrets_encrypt_secret_secret() OWNER TO supabase_admin;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: audit_log_entries; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.audit_log_entries (
    instance_id uuid,
    id uuid NOT NULL,
    payload json,
    created_at timestamp with time zone,
    ip_address character varying(64) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE auth.audit_log_entries OWNER TO supabase_auth_admin;

--
-- Name: TABLE audit_log_entries; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.audit_log_entries IS 'Auth: Audit trail for user actions.';


--
-- Name: flow_state; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.flow_state (
    id uuid NOT NULL,
    user_id uuid,
    auth_code text NOT NULL,
    code_challenge_method auth.code_challenge_method NOT NULL,
    code_challenge text NOT NULL,
    provider_type text NOT NULL,
    provider_access_token text,
    provider_refresh_token text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    authentication_method text NOT NULL,
    auth_code_issued_at timestamp with time zone
);


ALTER TABLE auth.flow_state OWNER TO supabase_auth_admin;

--
-- Name: TABLE flow_state; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.flow_state IS 'stores metadata for pkce logins';


--
-- Name: identities; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.identities (
    provider_id text NOT NULL,
    user_id uuid NOT NULL,
    identity_data jsonb NOT NULL,
    provider text NOT NULL,
    last_sign_in_at timestamp with time zone,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    email text GENERATED ALWAYS AS (lower((identity_data ->> 'email'::text))) STORED,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE auth.identities OWNER TO supabase_auth_admin;

--
-- Name: TABLE identities; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.identities IS 'Auth: Stores identities associated to a user.';


--
-- Name: COLUMN identities.email; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.identities.email IS 'Auth: Email is a generated column that references the optional email property in the identity_data';


--
-- Name: instances; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.instances (
    id uuid NOT NULL,
    uuid uuid,
    raw_base_config text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone
);


ALTER TABLE auth.instances OWNER TO supabase_auth_admin;

--
-- Name: TABLE instances; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.instances IS 'Auth: Manages users across multiple sites.';


--
-- Name: mfa_amr_claims; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_amr_claims (
    session_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    authentication_method text NOT NULL,
    id uuid NOT NULL
);


ALTER TABLE auth.mfa_amr_claims OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_amr_claims; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_amr_claims IS 'auth: stores authenticator method reference claims for multi factor authentication';


--
-- Name: mfa_challenges; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_challenges (
    id uuid NOT NULL,
    factor_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    verified_at timestamp with time zone,
    ip_address inet NOT NULL,
    otp_code text
);


ALTER TABLE auth.mfa_challenges OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_challenges; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_challenges IS 'auth: stores metadata about challenge requests made';


--
-- Name: mfa_factors; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_factors (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    friendly_name text,
    factor_type auth.factor_type NOT NULL,
    status auth.factor_status NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    secret text,
    phone text,
    last_challenged_at timestamp with time zone
);


ALTER TABLE auth.mfa_factors OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_factors; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_factors IS 'auth: stores metadata about factors';


--
-- Name: one_time_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.one_time_tokens (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    token_type auth.one_time_token_type NOT NULL,
    token_hash text NOT NULL,
    relates_to text NOT NULL,
    created_at timestamp without time zone DEFAULT now() NOT NULL,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    CONSTRAINT one_time_tokens_token_hash_check CHECK ((char_length(token_hash) > 0))
);


ALTER TABLE auth.one_time_tokens OWNER TO supabase_auth_admin;

--
-- Name: refresh_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.refresh_tokens (
    instance_id uuid,
    id bigint NOT NULL,
    token character varying(255),
    user_id character varying(255),
    revoked boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    parent character varying(255),
    session_id uuid
);


ALTER TABLE auth.refresh_tokens OWNER TO supabase_auth_admin;

--
-- Name: TABLE refresh_tokens; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.refresh_tokens IS 'Auth: Store of tokens used to refresh JWT tokens once they expire.';


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE; Schema: auth; Owner: supabase_auth_admin
--

CREATE SEQUENCE auth.refresh_tokens_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE auth.refresh_tokens_id_seq OWNER TO supabase_auth_admin;

--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE OWNED BY; Schema: auth; Owner: supabase_auth_admin
--

ALTER SEQUENCE auth.refresh_tokens_id_seq OWNED BY auth.refresh_tokens.id;


--
-- Name: saml_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_providers (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    entity_id text NOT NULL,
    metadata_xml text NOT NULL,
    metadata_url text,
    attribute_mapping jsonb,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    name_id_format text,
    CONSTRAINT "entity_id not empty" CHECK ((char_length(entity_id) > 0)),
    CONSTRAINT "metadata_url not empty" CHECK (((metadata_url = NULL::text) OR (char_length(metadata_url) > 0))),
    CONSTRAINT "metadata_xml not empty" CHECK ((char_length(metadata_xml) > 0))
);


ALTER TABLE auth.saml_providers OWNER TO supabase_auth_admin;

--
-- Name: TABLE saml_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_providers IS 'Auth: Manages SAML Identity Provider connections.';


--
-- Name: saml_relay_states; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_relay_states (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    request_id text NOT NULL,
    for_email text,
    redirect_to text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    flow_state_id uuid,
    CONSTRAINT "request_id not empty" CHECK ((char_length(request_id) > 0))
);


ALTER TABLE auth.saml_relay_states OWNER TO supabase_auth_admin;

--
-- Name: TABLE saml_relay_states; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_relay_states IS 'Auth: Contains SAML Relay State information for each Service Provider initiated login.';


--
-- Name: schema_migrations; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE auth.schema_migrations OWNER TO supabase_auth_admin;

--
-- Name: TABLE schema_migrations; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.schema_migrations IS 'Auth: Manages updates to the auth system.';


--
-- Name: sessions; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sessions (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    factor_id uuid,
    aal auth.aal_level,
    not_after timestamp with time zone,
    refreshed_at timestamp without time zone,
    user_agent text,
    ip inet,
    tag text
);


ALTER TABLE auth.sessions OWNER TO supabase_auth_admin;

--
-- Name: TABLE sessions; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sessions IS 'Auth: Stores session data associated to a user.';


--
-- Name: COLUMN sessions.not_after; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sessions.not_after IS 'Auth: Not after is a nullable column that contains a timestamp after which the session should be regarded as expired.';


--
-- Name: sso_domains; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_domains (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    domain text NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "domain not empty" CHECK ((char_length(domain) > 0))
);


ALTER TABLE auth.sso_domains OWNER TO supabase_auth_admin;

--
-- Name: TABLE sso_domains; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_domains IS 'Auth: Manages SSO email address domain mapping to an SSO Identity Provider.';


--
-- Name: sso_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_providers (
    id uuid NOT NULL,
    resource_id text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "resource_id not empty" CHECK (((resource_id = NULL::text) OR (char_length(resource_id) > 0)))
);


ALTER TABLE auth.sso_providers OWNER TO supabase_auth_admin;

--
-- Name: TABLE sso_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_providers IS 'Auth: Manages SSO identity provider information; see saml_providers for SAML.';


--
-- Name: COLUMN sso_providers.resource_id; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sso_providers.resource_id IS 'Auth: Uniquely identifies a SSO provider according to a user-chosen resource ID (case insensitive), useful in infrastructure as code.';


--
-- Name: users; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.users (
    instance_id uuid,
    id uuid NOT NULL,
    aud character varying(255),
    role character varying(255),
    email character varying(255),
    encrypted_password character varying(255),
    email_confirmed_at timestamp with time zone,
    invited_at timestamp with time zone,
    confirmation_token character varying(255),
    confirmation_sent_at timestamp with time zone,
    recovery_token character varying(255),
    recovery_sent_at timestamp with time zone,
    email_change_token_new character varying(255),
    email_change character varying(255),
    email_change_sent_at timestamp with time zone,
    last_sign_in_at timestamp with time zone,
    raw_app_meta_data jsonb,
    raw_user_meta_data jsonb,
    is_super_admin boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    phone text DEFAULT NULL::character varying,
    phone_confirmed_at timestamp with time zone,
    phone_change text DEFAULT ''::character varying,
    phone_change_token character varying(255) DEFAULT ''::character varying,
    phone_change_sent_at timestamp with time zone,
    confirmed_at timestamp with time zone GENERATED ALWAYS AS (LEAST(email_confirmed_at, phone_confirmed_at)) STORED,
    email_change_token_current character varying(255) DEFAULT ''::character varying,
    email_change_confirm_status smallint DEFAULT 0,
    banned_until timestamp with time zone,
    reauthentication_token character varying(255) DEFAULT ''::character varying,
    reauthentication_sent_at timestamp with time zone,
    is_sso_user boolean DEFAULT false NOT NULL,
    deleted_at timestamp with time zone,
    is_anonymous boolean DEFAULT false NOT NULL,
    CONSTRAINT users_email_change_confirm_status_check CHECK (((email_change_confirm_status >= 0) AND (email_change_confirm_status <= 2)))
);


ALTER TABLE auth.users OWNER TO supabase_auth_admin;

--
-- Name: TABLE users; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.users IS 'Auth: Stores user login data within a secure schema.';


--
-- Name: COLUMN users.is_sso_user; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.users.is_sso_user IS 'Auth: Set this column to true when the account comes from SSO. These accounts can have duplicate emails.';


--
-- Name: analytics; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.analytics (
    user_id integer NOT NULL,
    assignment_id integer NOT NULL,
    average_rating numeric,
    completed_reviews integer DEFAULT 0 NOT NULL,
    total_reviews integer NOT NULL
);


ALTER TABLE public.analytics OWNER TO postgres;

--
-- Name: assignments; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.assignments (
    id integer NOT NULL,
    name text NOT NULL,
    workspace_id integer NOT NULL,
    start_date timestamp with time zone NOT NULL,
    due_date timestamp with time zone NOT NULL,
    description text,
    started boolean DEFAULT false NOT NULL
);


ALTER TABLE public.assignments OWNER TO postgres;

--
-- Name: assignments_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.assignments_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.assignments_id_seq OWNER TO postgres;

--
-- Name: assignments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.assignments_id_seq OWNED BY public.assignments.id;


--
-- Name: groups; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.groups (
    id integer NOT NULL,
    workspace_id integer,
    name text NOT NULL
);


ALTER TABLE public.groups OWNER TO postgres;

--
-- Name: groups_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.groups_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.groups_id_seq OWNER TO postgres;

--
-- Name: groups_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.groups_id_seq OWNED BY public.groups.id;


--
-- Name: journal_assignments; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.journal_assignments (
    id integer NOT NULL,
    name text NOT NULL,
    workspace_id integer,
    start_date timestamp with time zone NOT NULL,
    end_date timestamp with time zone NOT NULL,
    week_number integer NOT NULL
);


ALTER TABLE public.journal_assignments OWNER TO postgres;

--
-- Name: journal_assignments_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.journal_assignments_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.journal_assignments_id_seq OWNER TO postgres;

--
-- Name: journal_assignments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.journal_assignments_id_seq OWNED BY public.journal_assignments.id;


--
-- Name: journal_entries; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.journal_entries (
    id integer NOT NULL,
    journal_assignment_id integer,
    user_id integer,
    content character varying(40000),
    submitted_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.journal_entries OWNER TO postgres;

--
-- Name: journal_entries_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.journal_entries_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.journal_entries_id_seq OWNER TO postgres;

--
-- Name: journal_entries_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.journal_entries_id_seq OWNED BY public.journal_entries.id;


--
-- Name: memberships; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.memberships (
    user_id integer NOT NULL,
    workspace_id integer NOT NULL,
    group_id integer,
    role text NOT NULL
);


ALTER TABLE public.memberships OWNER TO postgres;

--
-- Name: password_reset; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.password_reset (
    email text,
    reset_token text,
    reset_token_expiry timestamp with time zone
);


ALTER TABLE public.password_reset OWNER TO postgres;

--
-- Name: questions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.questions (
    id integer NOT NULL,
    question text NOT NULL,
    assignment_id integer
);


ALTER TABLE public.questions OWNER TO postgres;

--
-- Name: questions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.questions_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.questions_id_seq OWNER TO postgres;

--
-- Name: questions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.questions_id_seq OWNED BY public.questions.id;


--
-- Name: ratings; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ratings (
    review_id integer NOT NULL,
    question_id integer NOT NULL,
    rating integer NOT NULL
);


ALTER TABLE public.ratings OWNER TO postgres;

--
-- Name: reviews; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.reviews (
    id integer NOT NULL,
    assignment_id integer,
    group_id integer,
    user_id integer,
    target_id integer,
    comment text,
    completed boolean DEFAULT false NOT NULL
);


ALTER TABLE public.reviews OWNER TO postgres;

--
-- Name: reviews_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.reviews_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.reviews_id_seq OWNER TO postgres;

--
-- Name: reviews_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.reviews_id_seq OWNED BY public.reviews.id;


--
-- Name: users; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.users (
    id integer NOT NULL,
    first_name text NOT NULL,
    last_name text NOT NULL,
    email text NOT NULL,
    password text,
    role text NOT NULL,
    refresh_token text
);


ALTER TABLE public.users OWNER TO postgres;

--
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.users_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.users_id_seq OWNER TO postgres;

--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.users_id_seq OWNED BY public.users.id;


--
-- Name: workspaces; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.workspaces (
    id integer NOT NULL,
    name text NOT NULL
);


ALTER TABLE public.workspaces OWNER TO postgres;

--
-- Name: workspaces_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.workspaces_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.workspaces_id_seq OWNER TO postgres;

--
-- Name: workspaces_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.workspaces_id_seq OWNED BY public.workspaces.id;


--
-- Name: messages; Type: TABLE; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE TABLE realtime.messages (
    id bigint NOT NULL,
    topic text NOT NULL,
    extension text NOT NULL,
    inserted_at timestamp(0) without time zone NOT NULL,
    updated_at timestamp(0) without time zone NOT NULL
);


ALTER TABLE realtime.messages OWNER TO supabase_realtime_admin;

--
-- Name: messages_id_seq; Type: SEQUENCE; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE SEQUENCE realtime.messages_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE realtime.messages_id_seq OWNER TO supabase_realtime_admin;

--
-- Name: messages_id_seq; Type: SEQUENCE OWNED BY; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER SEQUENCE realtime.messages_id_seq OWNED BY realtime.messages.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.schema_migrations (
    version bigint NOT NULL,
    inserted_at timestamp(0) without time zone
);


ALTER TABLE realtime.schema_migrations OWNER TO supabase_admin;

--
-- Name: subscription; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.subscription (
    id bigint NOT NULL,
    subscription_id uuid NOT NULL,
    entity regclass NOT NULL,
    filters realtime.user_defined_filter[] DEFAULT '{}'::realtime.user_defined_filter[] NOT NULL,
    claims jsonb NOT NULL,
    claims_role regrole GENERATED ALWAYS AS (realtime.to_regrole((claims ->> 'role'::text))) STORED NOT NULL,
    created_at timestamp without time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


ALTER TABLE realtime.subscription OWNER TO supabase_admin;

--
-- Name: subscription_id_seq; Type: SEQUENCE; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE realtime.subscription ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME realtime.subscription_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: buckets; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.buckets (
    id text NOT NULL,
    name text NOT NULL,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    public boolean DEFAULT false,
    avif_autodetection boolean DEFAULT false,
    file_size_limit bigint,
    allowed_mime_types text[],
    owner_id text
);


ALTER TABLE storage.buckets OWNER TO supabase_storage_admin;

--
-- Name: COLUMN buckets.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.buckets.owner IS 'Field is deprecated, use owner_id instead';


--
-- Name: migrations; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.migrations (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    hash character varying(40) NOT NULL,
    executed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE storage.migrations OWNER TO supabase_storage_admin;

--
-- Name: objects; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.objects (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    bucket_id text,
    name text,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    last_accessed_at timestamp with time zone DEFAULT now(),
    metadata jsonb,
    path_tokens text[] GENERATED ALWAYS AS (string_to_array(name, '/'::text)) STORED,
    version text,
    owner_id text,
    user_metadata jsonb
);


ALTER TABLE storage.objects OWNER TO supabase_storage_admin;

--
-- Name: COLUMN objects.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.objects.owner IS 'Field is deprecated, use owner_id instead';


--
-- Name: s3_multipart_uploads; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.s3_multipart_uploads (
    id text NOT NULL,
    in_progress_size bigint DEFAULT 0 NOT NULL,
    upload_signature text NOT NULL,
    bucket_id text NOT NULL,
    key text NOT NULL COLLATE pg_catalog."C",
    version text NOT NULL,
    owner_id text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    user_metadata jsonb
);


ALTER TABLE storage.s3_multipart_uploads OWNER TO supabase_storage_admin;

--
-- Name: s3_multipart_uploads_parts; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.s3_multipart_uploads_parts (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    upload_id text NOT NULL,
    size bigint DEFAULT 0 NOT NULL,
    part_number integer NOT NULL,
    bucket_id text NOT NULL,
    key text NOT NULL COLLATE pg_catalog."C",
    etag text NOT NULL,
    owner_id text,
    version text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE storage.s3_multipart_uploads_parts OWNER TO supabase_storage_admin;

--
-- Name: decrypted_secrets; Type: VIEW; Schema: vault; Owner: supabase_admin
--

CREATE VIEW vault.decrypted_secrets AS
 SELECT secrets.id,
    secrets.name,
    secrets.description,
    secrets.secret,
        CASE
            WHEN (secrets.secret IS NULL) THEN NULL::text
            ELSE
            CASE
                WHEN (secrets.key_id IS NULL) THEN NULL::text
                ELSE convert_from(pgsodium.crypto_aead_det_decrypt(decode(secrets.secret, 'base64'::text), convert_to(((((secrets.id)::text || secrets.description) || (secrets.created_at)::text) || (secrets.updated_at)::text), 'utf8'::name), secrets.key_id, secrets.nonce), 'utf8'::name)
            END
        END AS decrypted_secret,
    secrets.key_id,
    secrets.nonce,
    secrets.created_at,
    secrets.updated_at
   FROM vault.secrets;


ALTER TABLE vault.decrypted_secrets OWNER TO supabase_admin;

--
-- Name: refresh_tokens id; Type: DEFAULT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens ALTER COLUMN id SET DEFAULT nextval('auth.refresh_tokens_id_seq'::regclass);


--
-- Name: assignments id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.assignments ALTER COLUMN id SET DEFAULT nextval('public.assignments_id_seq'::regclass);


--
-- Name: groups id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.groups ALTER COLUMN id SET DEFAULT nextval('public.groups_id_seq'::regclass);


--
-- Name: journal_assignments id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.journal_assignments ALTER COLUMN id SET DEFAULT nextval('public.journal_assignments_id_seq'::regclass);


--
-- Name: journal_entries id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.journal_entries ALTER COLUMN id SET DEFAULT nextval('public.journal_entries_id_seq'::regclass);


--
-- Name: questions id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.questions ALTER COLUMN id SET DEFAULT nextval('public.questions_id_seq'::regclass);


--
-- Name: reviews id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.reviews ALTER COLUMN id SET DEFAULT nextval('public.reviews_id_seq'::regclass);


--
-- Name: users id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users ALTER COLUMN id SET DEFAULT nextval('public.users_id_seq'::regclass);


--
-- Name: workspaces id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.workspaces ALTER COLUMN id SET DEFAULT nextval('public.workspaces_id_seq'::regclass);


--
-- Name: messages id; Type: DEFAULT; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE ONLY realtime.messages ALTER COLUMN id SET DEFAULT nextval('realtime.messages_id_seq'::regclass);


--
-- Data for Name: audit_log_entries; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.audit_log_entries (instance_id, id, payload, created_at, ip_address) FROM stdin;
\.


--
-- Data for Name: flow_state; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.flow_state (id, user_id, auth_code, code_challenge_method, code_challenge, provider_type, provider_access_token, provider_refresh_token, created_at, updated_at, authentication_method, auth_code_issued_at) FROM stdin;
\.


--
-- Data for Name: identities; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.identities (provider_id, user_id, identity_data, provider, last_sign_in_at, created_at, updated_at, id) FROM stdin;
\.


--
-- Data for Name: instances; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.instances (id, uuid, raw_base_config, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: mfa_amr_claims; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_amr_claims (session_id, created_at, updated_at, authentication_method, id) FROM stdin;
\.


--
-- Data for Name: mfa_challenges; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_challenges (id, factor_id, created_at, verified_at, ip_address, otp_code) FROM stdin;
\.


--
-- Data for Name: mfa_factors; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_factors (id, user_id, friendly_name, factor_type, status, created_at, updated_at, secret, phone, last_challenged_at) FROM stdin;
\.


--
-- Data for Name: one_time_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.one_time_tokens (id, user_id, token_type, token_hash, relates_to, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: refresh_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.refresh_tokens (instance_id, id, token, user_id, revoked, created_at, updated_at, parent, session_id) FROM stdin;
\.


--
-- Data for Name: saml_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_providers (id, sso_provider_id, entity_id, metadata_xml, metadata_url, attribute_mapping, created_at, updated_at, name_id_format) FROM stdin;
\.


--
-- Data for Name: saml_relay_states; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_relay_states (id, sso_provider_id, request_id, for_email, redirect_to, created_at, updated_at, flow_state_id) FROM stdin;
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.schema_migrations (version) FROM stdin;
20171026211738
20171026211808
20171026211834
20180103212743
20180108183307
20180119214651
20180125194653
00
20210710035447
20210722035447
20210730183235
20210909172000
20210927181326
20211122151130
20211124214934
20211202183645
20220114185221
20220114185340
20220224000811
20220323170000
20220429102000
20220531120530
20220614074223
20220811173540
20221003041349
20221003041400
20221011041400
20221020193600
20221021073300
20221021082433
20221027105023
20221114143122
20221114143410
20221125140132
20221208132122
20221215195500
20221215195800
20221215195900
20230116124310
20230116124412
20230131181311
20230322519590
20230402418590
20230411005111
20230508135423
20230523124323
20230818113222
20230914180801
20231027141322
20231114161723
20231117164230
20240115144230
20240214120130
20240306115329
20240314092811
20240427152123
20240612123726
20240729123726
20240802193726
\.


--
-- Data for Name: sessions; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sessions (id, user_id, created_at, updated_at, factor_id, aal, not_after, refreshed_at, user_agent, ip, tag) FROM stdin;
\.


--
-- Data for Name: sso_domains; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_domains (id, sso_provider_id, domain, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: sso_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_providers (id, resource_id, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.users (instance_id, id, aud, role, email, encrypted_password, email_confirmed_at, invited_at, confirmation_token, confirmation_sent_at, recovery_token, recovery_sent_at, email_change_token_new, email_change, email_change_sent_at, last_sign_in_at, raw_app_meta_data, raw_user_meta_data, is_super_admin, created_at, updated_at, phone, phone_confirmed_at, phone_change, phone_change_token, phone_change_sent_at, email_change_token_current, email_change_confirm_status, banned_until, reauthentication_token, reauthentication_sent_at, is_sso_user, deleted_at, is_anonymous) FROM stdin;
\.


--
-- Data for Name: key; Type: TABLE DATA; Schema: pgsodium; Owner: supabase_admin
--

COPY pgsodium.key (id, status, created, expires, key_type, key_id, key_context, name, associated_data, raw_key, raw_key_nonce, parent_key, comment, user_data) FROM stdin;
\.


--
-- Data for Name: analytics; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.analytics (user_id, assignment_id, average_rating, completed_reviews, total_reviews) FROM stdin;
89	15	\N	0	4
90	15	\N	0	4
91	15	\N	0	4
92	15	\N	0	4
93	15	\N	0	4
94	15	\N	0	4
95	15	\N	0	4
96	15	\N	0	4
97	15	\N	0	4
98	15	\N	0	4
99	15	\N	0	4
100	15	\N	0	4
101	15	\N	0	4
102	15	\N	0	4
103	15	\N	0	4
105	15	\N	0	3
106	15	\N	0	3
107	15	\N	0	3
108	15	\N	0	3
109	15	\N	0	4
110	15	\N	0	4
111	15	\N	0	4
112	15	\N	0	4
113	15	\N	0	4
114	15	\N	0	4
6	8	\N	0	4
7	8	\N	0	4
8	8	\N	0	4
9	8	\N	0	4
10	8	\N	0	4
11	8	\N	0	4
12	8	\N	0	4
13	8	\N	0	4
14	8	\N	0	4
49	8	\N	0	4
16	8	2.0000000000000000	0	2
115	15	\N	0	4
1	10	\N	0	3
6	10	\N	0	4
7	10	\N	0	4
8	10	\N	0	4
9	10	\N	0	4
10	10	\N	0	3
11	10	\N	0	3
12	10	\N	0	3
13	10	\N	0	3
14	10	\N	0	1
15	10	\N	0	3
16	10	\N	0	3
36	10	\N	0	1
39	10	\N	0	1
49	10	\N	0	4
76	10	\N	0	1
285	10	\N	0	3
1	11	\N	0	3
6	11	\N	0	4
7	11	\N	0	4
8	11	\N	0	4
9	11	\N	0	4
10	11	\N	0	3
11	11	\N	0	3
12	11	\N	0	3
13	11	\N	0	3
14	11	\N	0	1
15	11	\N	0	3
16	11	\N	0	3
36	11	\N	0	1
39	11	\N	0	1
49	11	\N	0	4
76	11	\N	0	1
285	11	\N	0	3
1	12	\N	0	3
6	12	\N	0	4
7	12	\N	0	4
8	12	\N	0	4
9	12	\N	0	4
10	12	\N	0	3
11	12	\N	0	3
12	12	\N	0	3
13	12	\N	0	3
14	12	\N	0	1
15	12	\N	0	3
16	12	\N	0	3
36	12	\N	0	1
39	12	\N	0	1
49	12	\N	0	4
76	12	\N	0	1
285	12	\N	0	3
1	13	\N	0	3
6	13	\N	0	4
7	13	\N	0	4
8	13	\N	0	4
9	13	\N	0	4
10	13	\N	0	3
11	13	\N	0	3
12	13	\N	0	3
13	13	\N	0	3
14	13	\N	0	1
15	13	\N	0	3
16	13	\N	0	3
36	13	\N	0	1
39	13	\N	0	1
49	13	\N	0	4
76	13	\N	0	1
285	13	\N	0	3
1	8	4.0000000000000000	0	2
15	8	\N	2	2
6	9	\N	0	4
7	9	\N	0	4
8	9	\N	0	4
9	9	\N	0	4
10	9	\N	0	3
11	9	\N	0	3
12	9	\N	0	3
13	9	\N	0	3
14	9	\N	0	1
36	9	\N	0	1
39	9	\N	0	1
49	9	\N	0	4
76	9	\N	0	1
116	15	\N	0	4
117	15	\N	0	4
118	15	\N	0	4
119	15	\N	0	4
120	15	\N	0	4
121	15	\N	0	4
122	15	\N	0	4
123	15	\N	0	4
125	15	\N	0	3
126	15	\N	0	3
127	15	\N	0	3
128	15	\N	0	3
129	15	\N	0	4
130	15	\N	0	4
131	15	\N	0	4
132	15	\N	0	4
133	15	\N	0	4
134	15	\N	0	4
135	15	\N	0	4
136	15	\N	0	4
137	15	\N	0	4
138	15	\N	0	4
139	15	\N	0	4
140	15	\N	0	4
141	15	\N	0	4
142	15	\N	0	4
143	15	\N	0	4
145	15	\N	0	3
146	15	\N	0	3
147	15	\N	0	3
148	15	\N	0	3
149	15	\N	0	4
150	15	\N	0	4
151	15	\N	0	4
152	15	\N	0	4
153	15	\N	0	4
154	15	\N	0	4
155	15	\N	0	4
156	15	\N	0	4
157	15	\N	0	4
158	15	\N	0	4
159	15	\N	0	4
160	15	\N	0	4
161	15	\N	0	4
162	15	\N	0	4
163	15	\N	0	4
165	15	\N	0	3
166	15	\N	0	3
167	15	\N	0	3
168	15	\N	0	3
169	15	\N	0	4
170	15	\N	0	4
171	15	\N	0	4
172	15	\N	0	4
173	15	\N	0	4
85	15	5.0000000000000000	0	5
84	15	1.5000000000000000	0	5
88	15	4.0000000000000000	0	5
16	9	5.0000000000000000	0	3
285	9	5.0000000000000000	0	3
1	9	4.0000000000000000	0	3
174	15	\N	0	4
175	15	\N	0	4
176	15	\N	0	4
177	15	\N	0	4
178	15	\N	0	4
179	15	\N	0	4
180	15	\N	0	4
181	15	\N	0	4
182	15	\N	0	4
183	15	\N	0	4
185	15	\N	0	3
186	15	\N	0	3
187	15	\N	0	3
188	15	\N	0	3
189	15	\N	0	4
190	15	\N	0	4
191	15	\N	0	4
192	15	\N	0	4
193	15	\N	0	4
194	15	\N	0	4
195	15	\N	0	4
196	15	\N	0	4
197	15	\N	0	4
198	15	\N	0	4
199	15	\N	0	4
200	15	\N	0	4
201	15	\N	0	4
202	15	\N	0	4
203	15	\N	0	4
205	15	\N	0	3
206	15	\N	0	3
207	15	\N	0	3
208	15	\N	0	3
209	15	\N	0	4
210	15	\N	0	4
211	15	\N	0	4
212	15	\N	0	4
213	15	\N	0	4
214	15	\N	0	4
215	15	\N	0	4
216	15	\N	0	4
217	15	\N	0	4
218	15	\N	0	4
219	15	\N	0	4
220	15	\N	0	4
221	15	\N	0	4
222	15	\N	0	4
223	15	\N	0	4
225	15	\N	0	3
226	15	\N	0	3
227	15	\N	0	3
228	15	\N	0	3
229	15	\N	0	4
230	15	\N	0	4
231	15	\N	0	4
232	15	\N	0	4
233	15	\N	0	4
234	15	\N	0	4
235	15	\N	0	4
236	15	\N	0	4
237	15	\N	0	4
238	15	\N	0	4
239	15	\N	0	4
240	15	\N	0	4
241	15	\N	0	4
242	15	\N	0	4
243	15	\N	0	4
245	15	\N	0	3
246	15	\N	0	3
247	15	\N	0	3
248	15	\N	0	3
249	15	\N	0	4
250	15	\N	0	4
251	15	\N	0	4
252	15	\N	0	4
253	15	\N	0	4
254	15	\N	0	4
255	15	\N	0	4
256	15	\N	0	4
257	15	\N	0	4
258	15	\N	0	4
259	15	\N	0	4
260	15	\N	0	4
261	15	\N	0	4
262	15	\N	0	4
263	15	\N	0	4
265	15	\N	0	3
266	15	\N	0	3
267	15	\N	0	3
268	15	\N	0	3
269	15	\N	0	4
270	15	\N	0	4
271	15	\N	0	4
272	15	\N	0	4
273	15	\N	0	4
274	15	\N	0	4
275	15	\N	0	4
276	15	\N	0	4
277	15	\N	0	4
278	15	\N	0	4
279	15	\N	0	4
280	15	\N	0	4
281	15	\N	0	4
282	15	\N	0	4
283	15	\N	0	4
86	15	3.0000000000000000	0	5
87	15	2.5000000000000000	0	5
15	15	\N	5	5
15	9	\N	3	3
\.


--
-- Data for Name: assignments; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.assignments (id, name, workspace_id, start_date, due_date, description, started) FROM stdin;
8	Deployment	5	2024-08-16 00:00:00+00	2024-08-27 00:00:00+00	Description	t
10	Yep	5	2024-08-19 00:00:00+00	2024-08-20 00:00:00+00	Description	t
11	hshsh	5	2024-08-18 00:00:00+00	2024-08-22 00:00:00+00	Description	t
12	sdssd	5	2024-08-18 00:00:00+00	2024-08-21 00:00:00+00	Description	t
13	sdasdasda	5	2024-08-15 00:00:00+00	2024-08-21 00:00:00+00	Description	t
9	bruh	5	2024-08-22 00:00:00+00	2024-08-24 00:00:00+00	Description	t
15	Assignment 1	35	2024-08-21 00:00:00+00	2024-08-24 00:00:00+00	Description	t
\.


--
-- Data for Name: groups; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.groups (id, workspace_id, name) FROM stdin;
1	4	Winners
2	5	Teletubbiez
8	5	SWE
11	5	HEY
12	5	HEYYY
13	5	winners
17	5	losers
82	27	group_1
87	27	group_2
92	27	group_3
97	27	group_4
102	27	group_5
103	27	group_6
107	27	group_7
112	27	group_8
117	27	group_9
122	27	group_10
123	27	group_11
127	27	group_12
132	27	group_13
137	27	group_14
142	27	group_15
143	27	group_16
147	27	group_17
152	27	group_18
157	27	group_19
162	27	group_20
163	27	group_21
167	27	group_22
172	27	group_23
177	27	group_24
182	27	group_25
183	27	group_26
187	27	group_27
192	27	group_28
197	27	group_29
202	27	group_30
203	27	group_31
207	27	group_32
212	27	group_33
217	27	group_34
222	27	group_35
223	27	group_36
227	27	group_37
232	27	group_38
237	27	group_39
242	27	group_40
243	27	group_41
247	27	group_42
252	27	group_43
257	27	group_44
262	27	group_45
263	27	group_46
267	27	group_47
272	27	group_48
277	27	group_49
282	34	InshaAllah
283	7	Help
284	7	winners
288	7	losers
293	7	SWE
294	35	group_1
299	35	group_2
304	35	group_3
309	35	group_4
314	35	group_5
315	35	group_6
319	35	group_7
324	35	group_8
329	35	group_9
334	35	group_10
335	35	group_11
339	35	group_12
344	35	group_13
349	35	group_14
354	35	group_15
355	35	group_16
359	35	group_17
364	35	group_18
369	35	group_19
374	35	group_20
375	35	group_21
379	35	group_22
384	35	group_23
389	35	group_24
394	35	group_25
395	35	group_26
399	35	group_27
404	35	group_28
409	35	group_29
414	35	group_30
415	35	group_31
419	35	group_32
424	35	group_33
429	35	group_34
434	35	group_35
435	35	group_36
439	35	group_37
444	35	group_38
449	35	group_39
454	35	group_40
455	35	group_41
459	35	group_42
464	35	group_43
469	35	group_44
474	35	group_45
475	35	group_46
479	35	group_47
484	35	group_48
489	35	group_49
\.


--
-- Data for Name: journal_assignments; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.journal_assignments (id, name, workspace_id, start_date, end_date, week_number) FROM stdin;
16	Journal Week 1	5	2024-08-13 00:00:00+00	2024-08-19 00:00:00+00	1
17	Journal Week 2	5	2024-08-20 00:00:00+00	2024-08-26 00:00:00+00	2
18	Journal Week 3	5	2024-09-03 00:00:00+00	2024-09-09 00:00:00+00	3
19	Journal Week 4	5	2024-09-10 00:00:00+00	2024-09-16 00:00:00+00	4
20	Journal Week 5	5	2024-09-17 00:00:00+00	2024-09-23 00:00:00+00	5
21	Journal Week 6	5	2024-10-01 00:00:00+00	2024-10-07 00:00:00+00	6
22	Journal Week 7	5	2024-10-08 00:00:00+00	2024-10-14 00:00:00+00	7
23	Journal Week 8	5	2024-10-15 00:00:00+00	2024-10-21 00:00:00+00	8
24	Journal Week 9	5	2024-10-22 00:00:00+00	2024-10-28 00:00:00+00	9
25	Journal Week 10	5	2024-10-29 00:00:00+00	2024-11-04 01:00:00+00	10
26	Journal Week 11	5	2024-11-05 01:00:00+00	2024-11-11 01:00:00+00	11
27	Journal Week 12	5	2024-11-12 01:00:00+00	2024-11-18 01:00:00+00	12
28	Journal Week 13	5	2024-11-19 01:00:00+00	2024-11-25 01:00:00+00	13
29	Journal Week 14	5	2024-11-26 01:00:00+00	2024-12-02 01:00:00+00	14
30	Journal Week 15	5	2024-12-03 01:00:00+00	2024-12-09 01:00:00+00	15
31	Journal Week 16	5	2024-12-10 01:00:00+00	2024-12-16 01:00:00+00	16
100	Journal Week 1	27	2024-08-13 00:00:00+00	2024-08-19 00:00:00+00	1
101	Journal Week 2	27	2024-08-20 00:00:00+00	2024-08-26 00:00:00+00	2
102	Journal Week 1	35	2024-08-22 00:00:00+00	2024-08-28 00:00:00+00	1
103	Journal Week 2	35	2024-08-29 00:00:00+00	2024-09-04 00:00:00+00	2
104	Journal Week 3	35	2024-09-05 00:00:00+00	2024-09-11 00:00:00+00	3
\.


--
-- Data for Name: journal_entries; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.journal_entries (id, journal_assignment_id, user_id, content, submitted_at) FROM stdin;
3	16	15	The Evolution and Significance of Castles: A Comprehensive Study\nIntroduction\n\nI WANT TO SLEEEEPPP\n\nCastles are among the most iconic structures of medieval Europe, symbolizing the power, wealth, and architectural ingenuity of the time. Their history spans over a thousand years, from the early motte-and-bailey fortifications of the Norman Conquest to the grand stone fortresses that dot the landscapes of Britain, France, Germany, and beyond. Castles were not only military strongholds but also centers of administration, symbols of authority, and often homes to nobility. This essay explores the origins, evolution, and cultural significance of castles, highlighting their architectural developments, their role in feudal society, and their enduring legacy.\n\nThe Origins of Castles\nThe concept of castles originated in the early medieval period, with the earliest forms appearing in the 9th and 10th centuries. The word "castle" itself comes from the Latin word "castellum," meaning a fortified place. Castles were initially built by feudal lords and kings as a means of defending their territories and asserting control over the surrounding areas.\n\nThe earliest castles, known as motte-and-bailey castles, were relatively simple structures. A motte was a raised earthwork, often artificial, on which a wooden keep or tower was built. Surrounding the motte was the bailey, a lower enclosed area that housed additional buildings such as barracks, stables, and workshops. The entire structure was usually surrounded by a ditch and a wooden palisade. These castles were quick and relatively easy to construct, providing a rapid response to the need for defense during times of unrest.\n\nThe Norman Conquest of England in 1066 led to a proliferation of motte-and-bailey castles across the country. William the Conqueror and his followers built numerous castles to establish and maintain control over the newly conquered territory. The most famous of these early castles is the Tower of London, initially a motte-and-bailey structure that later evolved into a formidable stone fortress.\n\nThe Evolution of Castle Architecture\nAs medieval society became more complex and as military technology advanced, so too did the architecture of castles. By the 12th century, wooden structures were gradually replaced by stone, leading to the development of the stone keep castle. These stone castles were much more durable and offered greater protection against attacks. The keeps were typically rectangular in shape, with thick walls, narrow windows, and a single entrance that was heavily fortified.\n\nOne of the most significant advancements in castle architecture was the development of concentric castles in the 13th century. These castles featured multiple layers of defensive walls, often with circular or polygonal towers at regular intervals. The idea was to create a series of obstacles that attackers would have to overcome, with the inner walls being higher than the outer ones to allow defenders to shoot over the heads of those on the outer walls.\n\nThe most famous example of a concentric castle is the Krak des Chevaliers in modern-day Syria, built by the Knights Hospitaller during the Crusades. The castle's design, with its double walls and numerous towers, made it nearly impregnable and is considered one of the finest examples of military architecture of the time.\n\nIn addition to their military functions, castles also served as residences for the nobility. As such, they began to include more comfortable living quarters, chapels, and great halls. The great hall, in particular, became the social and administrative heart of the castle, where the lord would hold court, entertain guests, and conduct business. Over time, castles evolved from purely military fortifications into complex structures that served a variety of functions within feudal society.\n\nCastles and Feudal Society\nCastles were deeply intertwined with the feudal system that dominated medieval Europe. The feudal system was a hierarchical structure in which land was granted by a lord to a vassal in exchange for military service and other forms of allegiance. The castle was both a symbol and a tool of this system, providing a physical manifestation of the lord's power and authority over his vassals and serfs.\n\nThe location of a castle was often strategically chosen to control key routes, river crossings, or borders. By placing a castle in a prominent position, a lord could exert control over the surrounding territory, collect taxes, and protect his lands from invaders. Castles also served as administrative centers, where the lord would manage his estate, hold court, and dispense justice.\n\nIn times of war, castles became the focal points of defense. The garrisoned soldiers within the castle would defend it against attackers, while the surrounding population might seek refuge within its walls. The strong defensive features of castles, such as high walls, drawbridges, and moats, made them difficult to capture, and sieges could last for months or even years.\n\nHowever, the castle's role in feudal society was not just about defense and control. It also played a key role in the social and cultural life of the nobility. The lord and his family would live in relative comfort within the castle, enjoying privileges that were denied to the lower classes. The castle was a place of feasts, tournaments, and other forms of entertainment, reflecting the wealth and status of its owner.\n\nThe Decline of Castles\nThe decline of castles began in the late medieval period, as changes in military technology and society reduced their effectiveness and necessity. One of the key factors in the decline of castles was the development of gunpowder and artillery. The introduction of cannons made traditional castle walls vulnerable to bombardment, and the high, thick walls that had once been an asset now became a liability.\n\nThe shift in military strategy also played a role in the decline of castles. As professional armies became more common, the need for individual lords to maintain private fortresses diminished. The centralization of power in the hands of monarchs and the establishment of standing armies reduced the importance of feudal lords and their castles.\n\nFurthermore, the Renaissance brought about changes in architecture and lifestyle that made castles less desirable as residences. The austere, defensive architecture of castles gave way to more comfortable and aesthetically pleasing manor houses and palaces. These new residences were designed for comfort and display rather than defense, reflecting the changing tastes and priorities of the nobility.\n\nBy the 16th century, many castles had fallen into disrepair or were abandoned altogether. Some were repurposed as prisons, barracks, or administrative buildings, while others were left to decay. In some cases, the stone from abandoned castles was quarried and used for other building projects.\n\nThe Legacy of Castles\nDespite their decline as functional military structures, castles have left an enduring legacy. They continue to capture the imagination of people around the world and are often seen as symbols of a romanticized past. Castles are popular tourist attractions, drawing millions of visitors each year who are fascinated by their history, architecture, and the stories associated with them.\n\nThe architectural principles developed in castle construction have also influenced other forms of building. The use of fortified walls, towers, and moats can be seen in later military architecture, including fortresses and city walls. Additionally, the aesthetic elements of castles, such as crenellations and turrets, have been incorporated into various styles of architecture, from Gothic Revival to fantasy-inspired designs.\n\nCastles have also played a significant role in literature, art, and popular culture. They are often depicted as the settings for epic battles, heroic quests, and tales of chivalry. The image of the castle as a place of mystery, adventure, and romance has been perpetuated in works ranging from medieval literature to modern fantasy novels and films.\n\nIn addition to their cultural significance, castles have also been the subject of scholarly study. Historians, archaeologists, and architects have spent decades researching and restoring castles, uncovering new insights into medieval life and the development of military architecture. The study of castles provides valuable information about the social, political, and economic history of the medieval period, as well as the technological advancements of the time.\n\nConclusion\nCastles are among the most enduring symbols of the medieval period, representing the power, wealth, and ingenuity of the time. From their humble beginnings as motte-and-bailey fortifications to the grand stone fortresses of the later Middle Ages, castles played a crucial role in the defense, administration, and social life of feudal Europe. Although their military importance declined with the advent of gunpowder and the centralization of power, castles have left an indelible mark on history and continue to captivate the imagination.\n\nThe legacy of castles is evident not only in their physical remains but also in the cultural and artistic traditions they have inspired. As we continue to study and preserve these remarkable structures, we gain a deeper understanding of the medieval world and the people who built and lived in these monumental fortresses. Whether as historical monuments, tourist attractions, or symbols of a bygone era, castles remain an integral part of our collective heritage.	2024-08-17 05:57:36.801666+00
16	102	15	Honestly, I am finding it pretty hard researching the topic in question. I just don't know if we can develop a Role Playing Game using PHP and TypeScript. I would rather use Unity, but Leinecker and Gerber don't really like that.\n\nBasboos is so cute!\n\nEND.\n\nBy- Hashim Alkhateeb	2024-08-22 01:57:31.129126+00
17	17	15	hvkhkb	2024-08-22 02:19:09.983473+00
\.


--
-- Data for Name: memberships; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.memberships (user_id, workspace_id, group_id, role) FROM stdin;
49	5	13	Student
7	5	13	Student
8	5	13	Student
1	4	\N	Instructor
2	4	1	Student
4	4	1	Student
3	5	\N	Instructor
9	5	13	Student
10	5	17	Student
11	5	17	Student
12	5	17	Student
13	5	17	Student
76	5	8	Student
1	5	2	Student
15	5	2	Student
16	5	2	Student
3	7	\N	Instructor
6	5	13	Student
3	28	\N	Instructor
3	30	\N	Instructor
91	27	137	Student
83	27	\N	Instructor
84	27	82	Student
85	27	82	Student
36	5	12	Student
38	5	\N	Instructor
86	27	82	Student
87	27	82	Student
88	27	82	Student
89	27	87	Student
90	27	87	Student
92	27	87	Student
93	27	87	Student
94	27	92	Student
127	27	122	Student
14	5	12	Student
3	27	82	Student
39	5	8	Student
95	27	92	Student
96	27	92	Student
97	27	92	Student
98	27	92	Student
99	27	97	Student
100	27	97	Student
101	27	97	Student
102	27	97	Student
103	27	97	Student
104	27	102	Student
105	27	103	Student
106	27	103	Student
107	27	103	Student
108	27	103	Student
109	27	107	Student
110	27	107	Student
111	27	107	Student
112	27	107	Student
113	27	107	Student
114	27	112	Student
115	27	112	Student
116	27	112	Student
117	27	112	Student
118	27	112	Student
119	27	117	Student
120	27	117	Student
121	27	117	Student
122	27	117	Student
123	27	117	Student
124	27	122	Student
125	27	123	Student
126	27	123	Student
128	27	123	Student
129	27	127	Student
130	27	127	Student
131	27	127	Student
132	27	127	Student
133	27	127	Student
134	27	132	Student
135	27	132	Student
136	27	132	Student
137	27	132	Student
138	27	132	Student
139	27	137	Student
140	27	137	Student
141	27	137	Student
142	27	137	Student
143	27	137	Student
144	27	142	Student
145	27	143	Student
146	27	143	Student
147	27	143	Student
148	27	143	Student
149	27	147	Student
150	27	147	Student
151	27	147	Student
152	27	147	Student
153	27	147	Student
154	27	152	Student
155	27	152	Student
156	27	152	Student
157	27	152	Student
158	27	152	Student
159	27	157	Student
160	27	157	Student
161	27	157	Student
162	27	157	Student
163	27	157	Student
164	27	162	Student
165	27	163	Student
166	27	163	Student
167	27	163	Student
168	27	163	Student
169	27	167	Student
170	27	167	Student
171	27	167	Student
172	27	167	Student
173	27	167	Student
174	27	172	Student
175	27	172	Student
176	27	172	Student
177	27	172	Student
178	27	172	Student
179	27	177	Student
180	27	177	Student
181	27	177	Student
182	27	177	Student
183	27	177	Student
184	27	182	Student
185	27	183	Student
186	27	183	Student
187	27	183	Student
188	27	183	Student
189	27	187	Student
190	27	187	Student
191	27	187	Student
192	27	187	Student
193	27	187	Student
194	27	192	Student
195	27	192	Student
196	27	192	Student
197	27	192	Student
198	27	192	Student
199	27	197	Student
200	27	197	Student
201	27	197	Student
202	27	197	Student
203	27	197	Student
204	27	202	Student
205	27	203	Student
206	27	203	Student
207	27	203	Student
208	27	203	Student
209	27	207	Student
210	27	207	Student
211	27	207	Student
212	27	207	Student
213	27	207	Student
214	27	212	Student
215	27	212	Student
216	27	212	Student
217	27	212	Student
218	27	212	Student
219	27	217	Student
220	27	217	Student
221	27	217	Student
222	27	217	Student
223	27	217	Student
224	27	222	Student
225	27	223	Student
226	27	223	Student
227	27	223	Student
228	27	223	Student
229	27	227	Student
230	27	227	Student
231	27	227	Student
232	27	227	Student
233	27	227	Student
234	27	232	Student
235	27	232	Student
236	27	232	Student
237	27	232	Student
238	27	232	Student
239	27	237	Student
240	27	237	Student
241	27	237	Student
242	27	237	Student
243	27	237	Student
244	27	242	Student
245	27	243	Student
246	27	243	Student
247	27	243	Student
248	27	243	Student
249	27	247	Student
250	27	247	Student
251	27	247	Student
252	27	247	Student
253	27	247	Student
254	27	252	Student
255	27	252	Student
256	27	252	Student
257	27	252	Student
258	27	252	Student
259	27	257	Student
260	27	257	Student
261	27	257	Student
262	27	257	Student
263	27	257	Student
264	27	262	Student
265	27	263	Student
266	27	263	Student
267	27	263	Student
268	27	263	Student
269	27	267	Student
270	27	267	Student
271	27	267	Student
272	27	267	Student
273	27	267	Student
274	27	272	Student
275	27	272	Student
276	27	272	Student
277	27	272	Student
278	27	272	Student
279	27	277	Student
280	27	277	Student
281	27	277	Student
282	27	277	Student
283	27	277	Student
83	34	\N	Instructor
285	5	2	Student
49	7	284	Student
7	7	284	Student
8	7	284	Student
9	7	284	Student
10	7	288	Student
11	7	288	Student
12	7	288	Student
13	7	288	Student
14	7	288	Student
76	7	293	Student
3	35	\N	Instructor
84	35	294	Student
85	35	294	Student
86	35	294	Student
87	35	294	Student
88	35	294	Student
89	35	299	Student
90	35	299	Student
91	35	299	Student
92	35	299	Student
93	35	299	Student
94	35	304	Student
95	35	304	Student
96	35	304	Student
97	35	304	Student
98	35	304	Student
99	35	309	Student
100	35	309	Student
101	35	309	Student
102	35	309	Student
103	35	309	Student
104	35	314	Student
105	35	315	Student
106	35	315	Student
107	35	315	Student
108	35	315	Student
109	35	319	Student
110	35	319	Student
111	35	319	Student
112	35	319	Student
113	35	319	Student
114	35	324	Student
115	35	324	Student
116	35	324	Student
117	35	324	Student
118	35	324	Student
119	35	329	Student
120	35	329	Student
121	35	329	Student
122	35	329	Student
123	35	329	Student
124	35	334	Student
125	35	335	Student
126	35	335	Student
127	35	335	Student
128	35	335	Student
129	35	339	Student
130	35	339	Student
131	35	339	Student
132	35	339	Student
133	35	339	Student
134	35	344	Student
135	35	344	Student
136	35	344	Student
137	35	344	Student
138	35	344	Student
139	35	349	Student
140	35	349	Student
141	35	349	Student
142	35	349	Student
143	35	349	Student
144	35	354	Student
145	35	355	Student
146	35	355	Student
147	35	355	Student
148	35	355	Student
149	35	359	Student
150	35	359	Student
151	35	359	Student
152	35	359	Student
153	35	359	Student
154	35	364	Student
155	35	364	Student
156	35	364	Student
157	35	364	Student
158	35	364	Student
159	35	369	Student
160	35	369	Student
161	35	369	Student
162	35	369	Student
163	35	369	Student
164	35	374	Student
165	35	375	Student
166	35	375	Student
167	35	375	Student
168	35	375	Student
169	35	379	Student
170	35	379	Student
171	35	379	Student
172	35	379	Student
173	35	379	Student
174	35	384	Student
175	35	384	Student
176	35	384	Student
177	35	384	Student
178	35	384	Student
179	35	389	Student
180	35	389	Student
181	35	389	Student
182	35	389	Student
183	35	389	Student
184	35	394	Student
185	35	395	Student
186	35	395	Student
187	35	395	Student
188	35	395	Student
189	35	399	Student
190	35	399	Student
191	35	399	Student
192	35	399	Student
193	35	399	Student
194	35	404	Student
195	35	404	Student
196	35	404	Student
197	35	404	Student
198	35	404	Student
199	35	409	Student
200	35	409	Student
201	35	409	Student
202	35	409	Student
203	35	409	Student
204	35	414	Student
205	35	415	Student
206	35	415	Student
207	35	415	Student
208	35	415	Student
209	35	419	Student
210	35	419	Student
211	35	419	Student
212	35	419	Student
213	35	419	Student
214	35	424	Student
215	35	424	Student
216	35	424	Student
217	35	424	Student
218	35	424	Student
219	35	429	Student
220	35	429	Student
221	35	429	Student
222	35	429	Student
223	35	429	Student
224	35	434	Student
225	35	435	Student
226	35	435	Student
227	35	435	Student
228	35	435	Student
229	35	439	Student
230	35	439	Student
231	35	439	Student
232	35	439	Student
233	35	439	Student
234	35	444	Student
235	35	444	Student
236	35	444	Student
237	35	444	Student
238	35	444	Student
239	35	449	Student
240	35	449	Student
241	35	449	Student
242	35	449	Student
243	35	449	Student
244	35	454	Student
245	35	455	Student
246	35	455	Student
247	35	455	Student
248	35	455	Student
249	35	459	Student
250	35	459	Student
251	35	459	Student
252	35	459	Student
253	35	459	Student
254	35	464	Student
255	35	464	Student
256	35	464	Student
257	35	464	Student
258	35	464	Student
259	35	469	Student
260	35	469	Student
261	35	469	Student
262	35	469	Student
263	35	469	Student
264	35	474	Student
265	35	475	Student
266	35	475	Student
267	35	475	Student
268	35	475	Student
269	35	479	Student
270	35	479	Student
271	35	479	Student
272	35	479	Student
273	35	479	Student
274	35	484	Student
275	35	484	Student
276	35	484	Student
277	35	484	Student
278	35	484	Student
279	35	489	Student
280	35	489	Student
281	35	489	Student
282	35	489	Student
283	35	489	Student
15	35	294	Student
\.


--
-- Data for Name: password_reset; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.password_reset (email, reset_token, reset_token_expiry) FROM stdin;
portgashash@gmail.com	852890	2024-08-15 21:08:12.755+00
rick@ucf.edu	677762	2024-08-19 02:36:26.049+00
afathalla1@hotmail.com	151533	2024-08-19 06:31:58.15+00
\.


--
-- Data for Name: questions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.questions (id, question, assignment_id) FROM stdin;
31	Did you deploy?	8
32	Salam	9
33	Yep	10
34	sss	11
35	sdsdsd	12
36	asdasdasd	13
39	How efficient is this teammate with communication?	15
40	How fast are they with their responses?	15
\.


--
-- Data for Name: ratings; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ratings (review_id, question_id, rating) FROM stdin;
187	31	2
188	31	4
1219	39	4
1219	40	2
1223	39	5
1223	40	5
1222	39	1
1222	40	2
1221	39	4
1221	40	4
1220	39	3
1220	40	2
434	32	5
433	32	5
432	32	4
\.


--
-- Data for Name: reviews; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.reviews (id, assignment_id, group_id, user_id, target_id, comment, completed) FROM stdin;
1199	15	294	86	87	\N	f
1200	15	294	86	88	\N	f
1201	15	294	86	84	\N	f
1202	15	294	86	15	\N	f
1203	15	294	86	85	\N	f
1204	15	294	87	86	\N	f
1205	15	294	87	88	\N	f
1206	15	294	87	84	\N	f
1207	15	294	87	15	\N	f
1208	15	294	87	85	\N	f
1209	15	294	88	86	\N	f
1210	15	294	88	87	\N	f
1211	15	294	88	84	\N	f
1212	15	294	88	15	\N	f
1213	15	294	88	85	\N	f
1214	15	294	84	86	\N	f
1215	15	294	84	87	\N	f
1216	15	294	84	88	\N	f
1217	15	294	84	15	\N	f
1218	15	294	84	85	\N	f
1224	15	294	85	86	\N	f
1225	15	294	85	87	\N	f
1226	15	294	85	88	\N	f
1227	15	294	85	84	\N	f
1228	15	294	85	15	\N	f
1229	15	299	90	91	\N	f
1230	15	299	90	92	\N	f
1231	15	299	90	93	\N	f
1232	15	299	90	89	\N	f
1233	15	299	91	90	\N	f
1234	15	299	91	92	\N	f
1235	15	299	91	93	\N	f
1236	15	299	91	89	\N	f
1237	15	299	92	90	\N	f
1238	15	299	92	91	\N	f
1239	15	299	92	93	\N	f
1240	15	299	92	89	\N	f
1241	15	299	93	90	\N	f
1242	15	299	93	91	\N	f
1243	15	299	93	92	\N	f
1244	15	299	93	89	\N	f
1245	15	299	89	90	\N	f
1246	15	299	89	91	\N	f
1247	15	299	89	92	\N	f
1248	15	299	89	93	\N	f
1249	15	304	95	96	\N	f
1250	15	304	95	97	\N	f
1251	15	304	95	98	\N	f
1252	15	304	95	94	\N	f
1253	15	304	96	95	\N	f
1254	15	304	96	97	\N	f
1255	15	304	96	98	\N	f
1256	15	304	96	94	\N	f
1257	15	304	97	95	\N	f
1258	15	304	97	96	\N	f
1259	15	304	97	98	\N	f
1260	15	304	97	94	\N	f
1261	15	304	98	95	\N	f
1262	15	304	98	96	\N	f
1263	15	304	98	97	\N	f
1264	15	304	98	94	\N	f
1265	15	304	94	95	\N	f
1266	15	304	94	96	\N	f
1267	15	304	94	97	\N	f
1268	15	304	94	98	\N	f
1269	15	309	100	101	\N	f
1270	15	309	100	102	\N	f
1271	15	309	100	103	\N	f
1272	15	309	100	99	\N	f
188	8	2	15	1		t
185	8	2	16	15	\N	f
186	8	2	16	1	\N	f
189	8	2	1	16	\N	f
190	8	2	1	15	\N	f
191	8	13	49	7	\N	f
192	8	13	49	8	\N	f
193	8	13	49	9	\N	f
194	8	13	49	6	\N	f
195	8	13	7	49	\N	f
196	8	13	7	8	\N	f
197	8	13	7	9	\N	f
198	8	13	7	6	\N	f
199	8	13	8	49	\N	f
200	8	13	8	7	\N	f
201	8	13	8	9	\N	f
202	8	13	8	6	\N	f
203	8	13	9	49	\N	f
204	8	13	9	7	\N	f
205	8	13	9	8	\N	f
206	8	13	9	6	\N	f
207	8	13	6	49	\N	f
208	8	13	6	7	\N	f
209	8	13	6	8	\N	f
210	8	13	6	9	\N	f
211	8	17	13	12	\N	f
212	8	17	13	10	\N	f
213	8	17	13	11	\N	f
214	8	17	13	14	\N	f
215	8	17	12	13	\N	f
216	8	17	12	10	\N	f
217	8	17	12	11	\N	f
218	8	17	12	14	\N	f
219	8	17	10	13	\N	f
220	8	17	10	12	\N	f
221	8	17	10	11	\N	f
222	8	17	10	14	\N	f
223	8	17	11	13	\N	f
224	8	17	11	12	\N	f
225	8	17	11	10	\N	f
226	8	17	11	14	\N	f
227	8	17	14	13	\N	f
228	8	17	14	12	\N	f
229	8	17	14	10	\N	f
230	8	17	14	11	\N	f
187	8	2	15	16	Yes but so many issues	t
231	10	2	1	285	\N	f
232	10	2	1	16	\N	f
233	10	2	1	15	\N	f
234	10	2	285	1	\N	f
235	10	2	285	16	\N	f
236	10	2	285	15	\N	f
237	10	2	16	1	\N	f
238	10	2	16	285	\N	f
239	10	2	16	15	\N	f
240	10	2	15	1	\N	f
241	10	2	15	285	\N	f
242	10	2	15	16	\N	f
243	10	8	76	39	\N	f
244	10	8	39	76	\N	f
245	10	12	36	14	\N	f
246	10	12	14	36	\N	f
247	10	13	7	49	\N	f
248	10	13	7	9	\N	f
249	10	13	7	8	\N	f
250	10	13	7	6	\N	f
251	10	13	49	7	\N	f
252	10	13	49	9	\N	f
253	10	13	49	8	\N	f
254	10	13	49	6	\N	f
255	10	13	9	7	\N	f
256	10	13	9	49	\N	f
257	10	13	9	8	\N	f
258	10	13	9	6	\N	f
259	10	13	8	7	\N	f
260	10	13	8	49	\N	f
261	10	13	8	9	\N	f
262	10	13	8	6	\N	f
263	10	13	6	7	\N	f
1273	15	309	101	100	\N	f
1274	15	309	101	102	\N	f
1275	15	309	101	103	\N	f
1223	15	294	15	85		t
1222	15	294	15	84	Bruh!	t
1220	15	294	15	87		t
264	10	13	6	49	\N	f
265	10	13	6	9	\N	f
266	10	13	6	8	\N	f
267	10	17	11	13	\N	f
268	10	17	11	10	\N	f
269	10	17	11	12	\N	f
270	10	17	13	11	\N	f
271	10	17	13	10	\N	f
272	10	17	13	12	\N	f
273	10	17	10	11	\N	f
274	10	17	10	13	\N	f
275	10	17	10	12	\N	f
276	10	17	12	11	\N	f
277	10	17	12	13	\N	f
278	10	17	12	10	\N	f
279	11	2	1	285	\N	f
280	11	2	1	16	\N	f
281	11	2	1	15	\N	f
282	11	2	285	1	\N	f
283	11	2	285	16	\N	f
284	11	2	285	15	\N	f
285	11	2	16	1	\N	f
286	11	2	16	285	\N	f
287	11	2	16	15	\N	f
288	11	2	15	1	\N	f
289	11	2	15	285	\N	f
290	11	2	15	16	\N	f
291	11	8	76	39	\N	f
292	11	8	39	76	\N	f
293	11	12	36	14	\N	f
294	11	12	14	36	\N	f
295	11	13	7	49	\N	f
296	11	13	7	9	\N	f
297	11	13	7	8	\N	f
298	11	13	7	6	\N	f
299	11	13	49	7	\N	f
300	11	13	49	9	\N	f
301	11	13	49	8	\N	f
302	11	13	49	6	\N	f
303	11	13	9	7	\N	f
304	11	13	9	49	\N	f
305	11	13	9	8	\N	f
306	11	13	9	6	\N	f
307	11	13	8	7	\N	f
308	11	13	8	49	\N	f
309	11	13	8	9	\N	f
310	11	13	8	6	\N	f
311	11	13	6	7	\N	f
312	11	13	6	49	\N	f
313	11	13	6	9	\N	f
314	11	13	6	8	\N	f
315	11	17	11	13	\N	f
316	11	17	11	10	\N	f
317	11	17	11	12	\N	f
318	11	17	13	11	\N	f
319	11	17	13	10	\N	f
320	11	17	13	12	\N	f
321	11	17	10	11	\N	f
322	11	17	10	13	\N	f
323	11	17	10	12	\N	f
324	11	17	12	11	\N	f
325	11	17	12	13	\N	f
326	11	17	12	10	\N	f
327	12	2	1	285	\N	f
328	12	2	1	16	\N	f
329	12	2	1	15	\N	f
330	12	2	285	1	\N	f
331	12	2	285	16	\N	f
332	12	2	285	15	\N	f
333	12	2	16	1	\N	f
334	12	2	16	285	\N	f
335	12	2	16	15	\N	f
336	12	2	15	1	\N	f
337	12	2	15	285	\N	f
338	12	2	15	16	\N	f
339	12	8	76	39	\N	f
340	12	8	39	76	\N	f
341	12	12	36	14	\N	f
342	12	12	14	36	\N	f
343	12	13	7	49	\N	f
344	12	13	7	9	\N	f
345	12	13	7	8	\N	f
346	12	13	7	6	\N	f
347	12	13	49	7	\N	f
348	12	13	49	9	\N	f
349	12	13	49	8	\N	f
350	12	13	49	6	\N	f
351	12	13	9	7	\N	f
352	12	13	9	49	\N	f
353	12	13	9	8	\N	f
354	12	13	9	6	\N	f
355	12	13	8	7	\N	f
356	12	13	8	49	\N	f
357	12	13	8	9	\N	f
358	12	13	8	6	\N	f
359	12	13	6	7	\N	f
360	12	13	6	49	\N	f
361	12	13	6	9	\N	f
362	12	13	6	8	\N	f
363	12	17	11	13	\N	f
364	12	17	11	10	\N	f
365	12	17	11	12	\N	f
366	12	17	13	11	\N	f
367	12	17	13	10	\N	f
368	12	17	13	12	\N	f
369	12	17	10	11	\N	f
370	12	17	10	13	\N	f
371	12	17	10	12	\N	f
372	12	17	12	11	\N	f
373	12	17	12	13	\N	f
374	12	17	12	10	\N	f
375	13	2	1	285	\N	f
376	13	2	1	16	\N	f
377	13	2	1	15	\N	f
378	13	2	285	1	\N	f
379	13	2	285	16	\N	f
380	13	2	285	15	\N	f
381	13	2	16	1	\N	f
382	13	2	16	285	\N	f
383	13	2	16	15	\N	f
384	13	2	15	1	\N	f
385	13	2	15	285	\N	f
386	13	2	15	16	\N	f
387	13	8	76	39	\N	f
388	13	8	39	76	\N	f
389	13	12	36	14	\N	f
390	13	12	14	36	\N	f
391	13	13	7	49	\N	f
392	13	13	7	9	\N	f
393	13	13	7	8	\N	f
394	13	13	7	6	\N	f
395	13	13	49	7	\N	f
396	13	13	49	9	\N	f
397	13	13	49	8	\N	f
398	13	13	49	6	\N	f
399	13	13	9	7	\N	f
400	13	13	9	49	\N	f
401	13	13	9	8	\N	f
402	13	13	9	6	\N	f
403	13	13	8	7	\N	f
404	13	13	8	49	\N	f
405	13	13	8	9	\N	f
406	13	13	8	6	\N	f
407	13	13	6	7	\N	f
408	13	13	6	49	\N	f
409	13	13	6	9	\N	f
410	13	13	6	8	\N	f
411	13	17	11	13	\N	f
412	13	17	11	10	\N	f
413	13	17	11	12	\N	f
414	13	17	13	11	\N	f
415	13	17	13	10	\N	f
416	13	17	13	12	\N	f
417	13	17	10	11	\N	f
418	13	17	10	13	\N	f
419	13	17	10	12	\N	f
420	13	17	12	11	\N	f
421	13	17	12	13	\N	f
422	13	17	12	10	\N	f
423	9	2	1	285	\N	f
424	9	2	1	16	\N	f
425	9	2	1	15	\N	f
426	9	2	285	1	\N	f
427	9	2	285	16	\N	f
428	9	2	285	15	\N	f
429	9	2	16	1	\N	f
430	9	2	16	285	\N	f
431	9	2	16	15	\N	f
435	9	8	76	39	\N	f
436	9	8	39	76	\N	f
437	9	12	36	14	\N	f
438	9	12	14	36	\N	f
439	9	13	7	49	\N	f
440	9	13	7	9	\N	f
441	9	13	7	8	\N	f
442	9	13	7	6	\N	f
443	9	13	49	7	\N	f
444	9	13	49	9	\N	f
445	9	13	49	8	\N	f
446	9	13	49	6	\N	f
447	9	13	9	7	\N	f
448	9	13	9	49	\N	f
449	9	13	9	8	\N	f
450	9	13	9	6	\N	f
451	9	13	8	7	\N	f
452	9	13	8	49	\N	f
453	9	13	8	9	\N	f
454	9	13	8	6	\N	f
455	9	13	6	7	\N	f
456	9	13	6	49	\N	f
457	9	13	6	9	\N	f
458	9	13	6	8	\N	f
459	9	17	11	13	\N	f
460	9	17	11	10	\N	f
461	9	17	11	12	\N	f
462	9	17	13	11	\N	f
463	9	17	13	10	\N	f
464	9	17	13	12	\N	f
465	9	17	10	11	\N	f
466	9	17	10	13	\N	f
467	9	17	10	12	\N	f
468	9	17	12	11	\N	f
469	9	17	12	13	\N	f
470	9	17	12	10	\N	f
1276	15	309	101	99	\N	f
1277	15	309	102	100	\N	f
1278	15	309	102	101	\N	f
1279	15	309	102	103	\N	f
1280	15	309	102	99	\N	f
1281	15	309	103	100	\N	f
1282	15	309	103	101	\N	f
1283	15	309	103	102	\N	f
1284	15	309	103	99	\N	f
1285	15	309	99	100	\N	f
1286	15	309	99	101	\N	f
1287	15	309	99	102	\N	f
1288	15	309	99	103	\N	f
1289	15	315	105	106	\N	f
1290	15	315	105	107	\N	f
1291	15	315	105	108	\N	f
1292	15	315	106	105	\N	f
1293	15	315	106	107	\N	f
1294	15	315	106	108	\N	f
1295	15	315	107	105	\N	f
1296	15	315	107	106	\N	f
1297	15	315	107	108	\N	f
1298	15	315	108	105	\N	f
1299	15	315	108	106	\N	f
1300	15	315	108	107	\N	f
1301	15	319	109	110	\N	f
1302	15	319	109	111	\N	f
1303	15	319	109	112	\N	f
1304	15	319	109	113	\N	f
1305	15	319	110	109	\N	f
1306	15	319	110	111	\N	f
1307	15	319	110	112	\N	f
1308	15	319	110	113	\N	f
1309	15	319	111	109	\N	f
1310	15	319	111	110	\N	f
1311	15	319	111	112	\N	f
1312	15	319	111	113	\N	f
1313	15	319	112	109	\N	f
1314	15	319	112	110	\N	f
1315	15	319	112	111	\N	f
1316	15	319	112	113	\N	f
1317	15	319	113	109	\N	f
1318	15	319	113	110	\N	f
1319	15	319	113	111	\N	f
1320	15	319	113	112	\N	f
1321	15	324	115	116	\N	f
1322	15	324	115	117	\N	f
1323	15	324	115	118	\N	f
1324	15	324	115	114	\N	f
1325	15	324	116	115	\N	f
1326	15	324	116	117	\N	f
1327	15	324	116	118	\N	f
1328	15	324	116	114	\N	f
1329	15	324	117	115	\N	f
1330	15	324	117	116	\N	f
1331	15	324	117	118	\N	f
1332	15	324	117	114	\N	f
1333	15	324	118	115	\N	f
1334	15	324	118	116	\N	f
1335	15	324	118	117	\N	f
1336	15	324	118	114	\N	f
1337	15	324	114	115	\N	f
1338	15	324	114	116	\N	f
1339	15	324	114	117	\N	f
1340	15	324	114	118	\N	f
1341	15	329	120	121	\N	f
1342	15	329	120	122	\N	f
1343	15	329	120	123	\N	f
1344	15	329	120	119	\N	f
1345	15	329	121	120	\N	f
1346	15	329	121	122	\N	f
1347	15	329	121	123	\N	f
1348	15	329	121	119	\N	f
1349	15	329	122	120	\N	f
1350	15	329	122	121	\N	f
1351	15	329	122	123	\N	f
1352	15	329	122	119	\N	f
1353	15	329	123	120	\N	f
1354	15	329	123	121	\N	f
1355	15	329	123	122	\N	f
1356	15	329	123	119	\N	f
1357	15	329	119	120	\N	f
1358	15	329	119	121	\N	f
1359	15	329	119	122	\N	f
1360	15	329	119	123	\N	f
1361	15	335	126	127	\N	f
1362	15	335	126	128	\N	f
1363	15	335	126	125	\N	f
1364	15	335	127	126	\N	f
1365	15	335	127	128	\N	f
1366	15	335	127	125	\N	f
1367	15	335	128	126	\N	f
1368	15	335	128	127	\N	f
1369	15	335	128	125	\N	f
1370	15	335	125	126	\N	f
1371	15	335	125	127	\N	f
1372	15	335	125	128	\N	f
1373	15	339	130	131	\N	f
1374	15	339	130	132	\N	f
1375	15	339	130	133	\N	f
1376	15	339	130	129	\N	f
1377	15	339	131	130	\N	f
1378	15	339	131	132	\N	f
1379	15	339	131	133	\N	f
1380	15	339	131	129	\N	f
1381	15	339	132	130	\N	f
1382	15	339	132	131	\N	f
433	9	2	15	285	YESSS!	t
1383	15	339	132	133	\N	f
1384	15	339	132	129	\N	f
1385	15	339	133	130	\N	f
1386	15	339	133	131	\N	f
1387	15	339	133	132	\N	f
1388	15	339	133	129	\N	f
1389	15	339	129	130	\N	f
1390	15	339	129	131	\N	f
1391	15	339	129	132	\N	f
1392	15	339	129	133	\N	f
1393	15	344	134	135	\N	f
1394	15	344	134	136	\N	f
1395	15	344	134	137	\N	f
1396	15	344	134	138	\N	f
1397	15	344	135	134	\N	f
1398	15	344	135	136	\N	f
1399	15	344	135	137	\N	f
1400	15	344	135	138	\N	f
1401	15	344	136	134	\N	f
1402	15	344	136	135	\N	f
1403	15	344	136	137	\N	f
1404	15	344	136	138	\N	f
1405	15	344	137	134	\N	f
1406	15	344	137	135	\N	f
1407	15	344	137	136	\N	f
1408	15	344	137	138	\N	f
1409	15	344	138	134	\N	f
1410	15	344	138	135	\N	f
1411	15	344	138	136	\N	f
1412	15	344	138	137	\N	f
1413	15	349	142	143	\N	f
1414	15	349	142	140	\N	f
1415	15	349	142	139	\N	f
1416	15	349	142	141	\N	f
1417	15	349	143	142	\N	f
1418	15	349	143	140	\N	f
1419	15	349	143	139	\N	f
1420	15	349	143	141	\N	f
1421	15	349	140	142	\N	f
1422	15	349	140	143	\N	f
1423	15	349	140	139	\N	f
1424	15	349	140	141	\N	f
1425	15	349	139	142	\N	f
1426	15	349	139	143	\N	f
1427	15	349	139	140	\N	f
1428	15	349	139	141	\N	f
1429	15	349	141	142	\N	f
1430	15	349	141	143	\N	f
1431	15	349	141	140	\N	f
1432	15	349	141	139	\N	f
1433	15	355	147	148	\N	f
1434	15	355	147	145	\N	f
1435	15	355	147	146	\N	f
1436	15	355	148	147	\N	f
1437	15	355	148	145	\N	f
1438	15	355	148	146	\N	f
1439	15	355	145	147	\N	f
1440	15	355	145	148	\N	f
1441	15	355	145	146	\N	f
1442	15	355	146	147	\N	f
1443	15	355	146	148	\N	f
1444	15	355	146	145	\N	f
1445	15	359	152	149	\N	f
1446	15	359	152	150	\N	f
1447	15	359	152	151	\N	f
1448	15	359	152	153	\N	f
1449	15	359	149	152	\N	f
1450	15	359	149	150	\N	f
1451	15	359	149	151	\N	f
1452	15	359	149	153	\N	f
1453	15	359	150	152	\N	f
1454	15	359	150	149	\N	f
1455	15	359	150	151	\N	f
1456	15	359	150	153	\N	f
1457	15	359	151	152	\N	f
1458	15	359	151	149	\N	f
1459	15	359	151	150	\N	f
1460	15	359	151	153	\N	f
1461	15	359	153	152	\N	f
1462	15	359	153	149	\N	f
1463	15	359	153	150	\N	f
1464	15	359	153	151	\N	f
1465	15	364	155	156	\N	f
1466	15	364	155	157	\N	f
1467	15	364	155	154	\N	f
1468	15	364	155	158	\N	f
1469	15	364	156	155	\N	f
1470	15	364	156	157	\N	f
1471	15	364	156	154	\N	f
1472	15	364	156	158	\N	f
1473	15	364	157	155	\N	f
1474	15	364	157	156	\N	f
1475	15	364	157	154	\N	f
1476	15	364	157	158	\N	f
1477	15	364	154	155	\N	f
1478	15	364	154	156	\N	f
1479	15	364	154	157	\N	f
1480	15	364	154	158	\N	f
1481	15	364	158	155	\N	f
1482	15	364	158	156	\N	f
1483	15	364	158	157	\N	f
1484	15	364	158	154	\N	f
1485	15	369	162	159	\N	f
1486	15	369	162	160	\N	f
1487	15	369	162	161	\N	f
1488	15	369	162	163	\N	f
1489	15	369	159	162	\N	f
1490	15	369	159	160	\N	f
1491	15	369	159	161	\N	f
1492	15	369	159	163	\N	f
1493	15	369	160	162	\N	f
1494	15	369	160	159	\N	f
1495	15	369	160	161	\N	f
1496	15	369	160	163	\N	f
1497	15	369	161	162	\N	f
1498	15	369	161	159	\N	f
1499	15	369	161	160	\N	f
1500	15	369	161	163	\N	f
1501	15	369	163	162	\N	f
1502	15	369	163	159	\N	f
1503	15	369	163	160	\N	f
1504	15	369	163	161	\N	f
1505	15	375	166	167	\N	f
1506	15	375	166	168	\N	f
1507	15	375	166	165	\N	f
1508	15	375	167	166	\N	f
1509	15	375	167	168	\N	f
1510	15	375	167	165	\N	f
1511	15	375	168	166	\N	f
1512	15	375	168	167	\N	f
1513	15	375	168	165	\N	f
1514	15	375	165	166	\N	f
1515	15	375	165	167	\N	f
1516	15	375	165	168	\N	f
1517	15	379	170	171	\N	f
1518	15	379	170	172	\N	f
1519	15	379	170	173	\N	f
1520	15	379	170	169	\N	f
1521	15	379	171	170	\N	f
1522	15	379	171	172	\N	f
1523	15	379	171	173	\N	f
1524	15	379	171	169	\N	f
1525	15	379	172	170	\N	f
1526	15	379	172	171	\N	f
1527	15	379	172	173	\N	f
1528	15	379	172	169	\N	f
1529	15	379	173	170	\N	f
1530	15	379	173	171	\N	f
1531	15	379	173	172	\N	f
1532	15	379	173	169	\N	f
1533	15	379	169	170	\N	f
1534	15	379	169	171	\N	f
1535	15	379	169	172	\N	f
1536	15	379	169	173	\N	f
1537	15	384	175	176	\N	f
1538	15	384	175	177	\N	f
1539	15	384	175	178	\N	f
1540	15	384	175	174	\N	f
1541	15	384	176	175	\N	f
1542	15	384	176	177	\N	f
1543	15	384	176	178	\N	f
1544	15	384	176	174	\N	f
1545	15	384	177	175	\N	f
1546	15	384	177	176	\N	f
1547	15	384	177	178	\N	f
1548	15	384	177	174	\N	f
1549	15	384	178	175	\N	f
1550	15	384	178	176	\N	f
1551	15	384	178	177	\N	f
1552	15	384	178	174	\N	f
1553	15	384	174	175	\N	f
1554	15	384	174	176	\N	f
1555	15	384	174	177	\N	f
1556	15	384	174	178	\N	f
1557	15	389	180	181	\N	f
1558	15	389	180	182	\N	f
1559	15	389	180	183	\N	f
1560	15	389	180	179	\N	f
1561	15	389	181	180	\N	f
1562	15	389	181	182	\N	f
1563	15	389	181	183	\N	f
1564	15	389	181	179	\N	f
1565	15	389	182	180	\N	f
1566	15	389	182	181	\N	f
1567	15	389	182	183	\N	f
1568	15	389	182	179	\N	f
1569	15	389	183	180	\N	f
1570	15	389	183	181	\N	f
1571	15	389	183	182	\N	f
1572	15	389	183	179	\N	f
1573	15	389	179	180	\N	f
1574	15	389	179	181	\N	f
1575	15	389	179	182	\N	f
1576	15	389	179	183	\N	f
1577	15	395	186	185	\N	f
1578	15	395	186	187	\N	f
1579	15	395	186	188	\N	f
1580	15	395	185	186	\N	f
1581	15	395	185	187	\N	f
1582	15	395	185	188	\N	f
1583	15	395	187	186	\N	f
1584	15	395	187	185	\N	f
1585	15	395	187	188	\N	f
1586	15	395	188	186	\N	f
1587	15	395	188	185	\N	f
1588	15	395	188	187	\N	f
1589	15	399	192	189	\N	f
1590	15	399	192	190	\N	f
1591	15	399	192	193	\N	f
1592	15	399	192	191	\N	f
1593	15	399	189	192	\N	f
1594	15	399	189	190	\N	f
1595	15	399	189	193	\N	f
1596	15	399	189	191	\N	f
1597	15	399	190	192	\N	f
1598	15	399	190	189	\N	f
1599	15	399	190	193	\N	f
1600	15	399	190	191	\N	f
1601	15	399	193	192	\N	f
1602	15	399	193	189	\N	f
1603	15	399	193	190	\N	f
1604	15	399	193	191	\N	f
1605	15	399	191	192	\N	f
1606	15	399	191	189	\N	f
1607	15	399	191	190	\N	f
1608	15	399	191	193	\N	f
1609	15	404	195	196	\N	f
1610	15	404	195	197	\N	f
1611	15	404	195	198	\N	f
1612	15	404	195	194	\N	f
1613	15	404	196	195	\N	f
1614	15	404	196	197	\N	f
1615	15	404	196	198	\N	f
1616	15	404	196	194	\N	f
1617	15	404	197	195	\N	f
1618	15	404	197	196	\N	f
1619	15	404	197	198	\N	f
1620	15	404	197	194	\N	f
1621	15	404	198	195	\N	f
1622	15	404	198	196	\N	f
1623	15	404	198	197	\N	f
1624	15	404	198	194	\N	f
1625	15	404	194	195	\N	f
1626	15	404	194	196	\N	f
1627	15	404	194	197	\N	f
1628	15	404	194	198	\N	f
1629	15	409	200	201	\N	f
1630	15	409	200	202	\N	f
1631	15	409	200	203	\N	f
1632	15	409	200	199	\N	f
1633	15	409	201	200	\N	f
1634	15	409	201	202	\N	f
1635	15	409	201	203	\N	f
1636	15	409	201	199	\N	f
1637	15	409	202	200	\N	f
1638	15	409	202	201	\N	f
1639	15	409	202	203	\N	f
1640	15	409	202	199	\N	f
1641	15	409	203	200	\N	f
1642	15	409	203	201	\N	f
1643	15	409	203	202	\N	f
1644	15	409	203	199	\N	f
1645	15	409	199	200	\N	f
1646	15	409	199	201	\N	f
1647	15	409	199	202	\N	f
1648	15	409	199	203	\N	f
1649	15	415	207	205	\N	f
1650	15	415	207	206	\N	f
1651	15	415	207	208	\N	f
1652	15	415	205	207	\N	f
1653	15	415	205	206	\N	f
1654	15	415	205	208	\N	f
1655	15	415	206	207	\N	f
1656	15	415	206	205	\N	f
1657	15	415	206	208	\N	f
1658	15	415	208	207	\N	f
1659	15	415	208	205	\N	f
1660	15	415	208	206	\N	f
1661	15	419	210	209	\N	f
1662	15	419	210	211	\N	f
1663	15	419	210	212	\N	f
1664	15	419	210	213	\N	f
1665	15	419	209	210	\N	f
1666	15	419	209	211	\N	f
1667	15	419	209	212	\N	f
1668	15	419	209	213	\N	f
1669	15	419	211	210	\N	f
1670	15	419	211	209	\N	f
1671	15	419	211	212	\N	f
1672	15	419	211	213	\N	f
1673	15	419	212	210	\N	f
1674	15	419	212	209	\N	f
1675	15	419	212	211	\N	f
1676	15	419	212	213	\N	f
1677	15	419	213	210	\N	f
1678	15	419	213	209	\N	f
1679	15	419	213	211	\N	f
1680	15	419	213	212	\N	f
1681	15	424	215	216	\N	f
1682	15	424	215	217	\N	f
1683	15	424	215	218	\N	f
1684	15	424	215	214	\N	f
1685	15	424	216	215	\N	f
1686	15	424	216	217	\N	f
1687	15	424	216	218	\N	f
1688	15	424	216	214	\N	f
1689	15	424	217	215	\N	f
1690	15	424	217	216	\N	f
1691	15	424	217	218	\N	f
1692	15	424	217	214	\N	f
1693	15	424	218	215	\N	f
1694	15	424	218	216	\N	f
1695	15	424	218	217	\N	f
1696	15	424	218	214	\N	f
1697	15	424	214	215	\N	f
1698	15	424	214	216	\N	f
1699	15	424	214	217	\N	f
1700	15	424	214	218	\N	f
1701	15	429	220	221	\N	f
1702	15	429	220	222	\N	f
1703	15	429	220	223	\N	f
1704	15	429	220	219	\N	f
1705	15	429	221	220	\N	f
1706	15	429	221	222	\N	f
1707	15	429	221	223	\N	f
1708	15	429	221	219	\N	f
1709	15	429	222	220	\N	f
1710	15	429	222	221	\N	f
1711	15	429	222	223	\N	f
1712	15	429	222	219	\N	f
1713	15	429	223	220	\N	f
1714	15	429	223	221	\N	f
1715	15	429	223	222	\N	f
1716	15	429	223	219	\N	f
1717	15	429	219	220	\N	f
1718	15	429	219	221	\N	f
1719	15	429	219	222	\N	f
1720	15	429	219	223	\N	f
1721	15	435	226	227	\N	f
1722	15	435	226	228	\N	f
1723	15	435	226	225	\N	f
1724	15	435	227	226	\N	f
1725	15	435	227	228	\N	f
1726	15	435	227	225	\N	f
1727	15	435	228	226	\N	f
1728	15	435	228	227	\N	f
1729	15	435	228	225	\N	f
1730	15	435	225	226	\N	f
1731	15	435	225	227	\N	f
1732	15	435	225	228	\N	f
1733	15	439	230	231	\N	f
1734	15	439	230	232	\N	f
1735	15	439	230	233	\N	f
1736	15	439	230	229	\N	f
1737	15	439	231	230	\N	f
1738	15	439	231	232	\N	f
1739	15	439	231	233	\N	f
1740	15	439	231	229	\N	f
1741	15	439	232	230	\N	f
1742	15	439	232	231	\N	f
1743	15	439	232	233	\N	f
1744	15	439	232	229	\N	f
1745	15	439	233	230	\N	f
1746	15	439	233	231	\N	f
1747	15	439	233	232	\N	f
1748	15	439	233	229	\N	f
1749	15	439	229	230	\N	f
1750	15	439	229	231	\N	f
1751	15	439	229	232	\N	f
1752	15	439	229	233	\N	f
1753	15	444	235	234	\N	f
1754	15	444	235	236	\N	f
1755	15	444	235	237	\N	f
1756	15	444	235	238	\N	f
1757	15	444	234	235	\N	f
1758	15	444	234	236	\N	f
1759	15	444	234	237	\N	f
1760	15	444	234	238	\N	f
1761	15	444	236	235	\N	f
1762	15	444	236	234	\N	f
1763	15	444	236	237	\N	f
1764	15	444	236	238	\N	f
1765	15	444	237	235	\N	f
1766	15	444	237	234	\N	f
1767	15	444	237	236	\N	f
1768	15	444	237	238	\N	f
1769	15	444	238	235	\N	f
1770	15	444	238	234	\N	f
1771	15	444	238	236	\N	f
1772	15	444	238	237	\N	f
1773	15	449	242	243	\N	f
1774	15	449	242	240	\N	f
1775	15	449	242	239	\N	f
1776	15	449	242	241	\N	f
1777	15	449	243	242	\N	f
1778	15	449	243	240	\N	f
1779	15	449	243	239	\N	f
1780	15	449	243	241	\N	f
1781	15	449	240	242	\N	f
1782	15	449	240	243	\N	f
1783	15	449	240	239	\N	f
1784	15	449	240	241	\N	f
1785	15	449	239	242	\N	f
1786	15	449	239	243	\N	f
1787	15	449	239	240	\N	f
1788	15	449	239	241	\N	f
1789	15	449	241	242	\N	f
1790	15	449	241	243	\N	f
1791	15	449	241	240	\N	f
1792	15	449	241	239	\N	f
1793	15	455	247	248	\N	f
1794	15	455	247	245	\N	f
1795	15	455	247	246	\N	f
1796	15	455	248	247	\N	f
1797	15	455	248	245	\N	f
1798	15	455	248	246	\N	f
1799	15	455	245	247	\N	f
1800	15	455	245	248	\N	f
1801	15	455	245	246	\N	f
1802	15	455	246	247	\N	f
1803	15	455	246	248	\N	f
1804	15	455	246	245	\N	f
1805	15	459	252	249	\N	f
1806	15	459	252	250	\N	f
1807	15	459	252	251	\N	f
1808	15	459	252	253	\N	f
1809	15	459	249	252	\N	f
1810	15	459	249	250	\N	f
1811	15	459	249	251	\N	f
1812	15	459	249	253	\N	f
1813	15	459	250	252	\N	f
1814	15	459	250	249	\N	f
1815	15	459	250	251	\N	f
1816	15	459	250	253	\N	f
1817	15	459	251	252	\N	f
1818	15	459	251	249	\N	f
1819	15	459	251	250	\N	f
1820	15	459	251	253	\N	f
1821	15	459	253	252	\N	f
1822	15	459	253	249	\N	f
1823	15	459	253	250	\N	f
1824	15	459	253	251	\N	f
1825	15	464	255	256	\N	f
1826	15	464	255	257	\N	f
1827	15	464	255	254	\N	f
1828	15	464	255	258	\N	f
1829	15	464	256	255	\N	f
1830	15	464	256	257	\N	f
1831	15	464	256	254	\N	f
1832	15	464	256	258	\N	f
1833	15	464	257	255	\N	f
1834	15	464	257	256	\N	f
1835	15	464	257	254	\N	f
1836	15	464	257	258	\N	f
1837	15	464	254	255	\N	f
1838	15	464	254	256	\N	f
1839	15	464	254	257	\N	f
1840	15	464	254	258	\N	f
1841	15	464	258	255	\N	f
1842	15	464	258	256	\N	f
1843	15	464	258	257	\N	f
1844	15	464	258	254	\N	f
1845	15	469	262	259	\N	f
1846	15	469	262	260	\N	f
1847	15	469	262	261	\N	f
1848	15	469	262	263	\N	f
1849	15	469	259	262	\N	f
1850	15	469	259	260	\N	f
1851	15	469	259	261	\N	f
1852	15	469	259	263	\N	f
1853	15	469	260	262	\N	f
1854	15	469	260	259	\N	f
1855	15	469	260	261	\N	f
1856	15	469	260	263	\N	f
1857	15	469	261	262	\N	f
1858	15	469	261	259	\N	f
1859	15	469	261	260	\N	f
1860	15	469	261	263	\N	f
1861	15	469	263	262	\N	f
1862	15	469	263	259	\N	f
1863	15	469	263	260	\N	f
1864	15	469	263	261	\N	f
1865	15	475	266	267	\N	f
1866	15	475	266	268	\N	f
1867	15	475	266	265	\N	f
1868	15	475	267	266	\N	f
1869	15	475	267	268	\N	f
1870	15	475	267	265	\N	f
1871	15	475	268	266	\N	f
1872	15	475	268	267	\N	f
1873	15	475	268	265	\N	f
1874	15	475	265	266	\N	f
1875	15	475	265	267	\N	f
1876	15	475	265	268	\N	f
1877	15	479	270	271	\N	f
1878	15	479	270	272	\N	f
1879	15	479	270	273	\N	f
1880	15	479	270	269	\N	f
1881	15	479	271	270	\N	f
1882	15	479	271	272	\N	f
1883	15	479	271	273	\N	f
1884	15	479	271	269	\N	f
1885	15	479	272	270	\N	f
1886	15	479	272	271	\N	f
1887	15	479	272	273	\N	f
1888	15	479	272	269	\N	f
1889	15	479	273	270	\N	f
1890	15	479	273	271	\N	f
1891	15	479	273	272	\N	f
1892	15	479	273	269	\N	f
1893	15	479	269	270	\N	f
1894	15	479	269	271	\N	f
1895	15	479	269	272	\N	f
1896	15	479	269	273	\N	f
1897	15	484	275	276	\N	f
1898	15	484	275	277	\N	f
1899	15	484	275	278	\N	f
1900	15	484	275	274	\N	f
1901	15	484	276	275	\N	f
1902	15	484	276	277	\N	f
1903	15	484	276	278	\N	f
1904	15	484	276	274	\N	f
1905	15	484	277	275	\N	f
1906	15	484	277	276	\N	f
1907	15	484	277	278	\N	f
1908	15	484	277	274	\N	f
1909	15	484	278	275	\N	f
1910	15	484	278	276	\N	f
1911	15	484	278	277	\N	f
1912	15	484	278	274	\N	f
1913	15	484	274	275	\N	f
1914	15	484	274	276	\N	f
1915	15	484	274	277	\N	f
1916	15	484	274	278	\N	f
1917	15	489	280	281	\N	f
1918	15	489	280	282	\N	f
1919	15	489	280	283	\N	f
1920	15	489	280	279	\N	f
1921	15	489	281	280	\N	f
1922	15	489	281	282	\N	f
1923	15	489	281	283	\N	f
1924	15	489	281	279	\N	f
1925	15	489	282	280	\N	f
1926	15	489	282	281	\N	f
1927	15	489	282	283	\N	f
1928	15	489	282	279	\N	f
1929	15	489	283	280	\N	f
1930	15	489	283	281	\N	f
1931	15	489	283	282	\N	f
1932	15	489	283	279	\N	f
1933	15	489	279	280	\N	f
1934	15	489	279	281	\N	f
1935	15	489	279	282	\N	f
1936	15	489	279	283	\N	f
1219	15	294	15	86	Overall, pretty solid teammate.	t
1221	15	294	15	88	SOLID!!	t
434	9	2	15	16	Mugiwara!	t
432	9	2	15	1	Wa Alaikum Assalam	t
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.users (id, first_name, last_name, email, password, role, refresh_token) FROM stdin;
1	Rick	Leinecker	rick@ucf.edu	$2b$10$ftiy93AyIydK2adPIv8ODuoqbjCzOUAd5YjTUNwYYLSDALEvwpFce	Admin	eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImZpcnN0TmFtZSI6IlJpY2siLCJsYXN0TmFtZSI6IkxlaW5lY2tlciIsImVtYWlsIjoicmlja0B1Y2YuZWR1IiwiaWF0IjoxNzI0MjU3NDYxLCJleHAiOjE3MjQzNDM4NjF9.h7N9UYyDiZUQ45MWChIWX7MPdpv0_XKMzTn7mZQlzQo
78	Delete	Man	deleteman@gg.com	$2b$10$DoQquTVPUlW42DgfTb01.enq1DWyFF9a.k2dYCu.cUQicj2s2lmh2	User	eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjc4LCJmaXJzdE5hbWUiOiJEZWxldGUiLCJsYXN0TmFtZSI6Ik1hbiIsImVtYWlsIjoiZGVsZXRlbWFuQGdnLmNvbSIsImlhdCI6MTcyNDAxODkyOSwiZXhwIjoxNzI0MTA1MzI5fQ.SI93aIdwL2zKpBv2GmvCKC_sAR1lqRrnhSuQ3gzagWk
49	A	A	A@mail.com	\N	User	\N
36	Ritsu	Kageyama	ritsu@gg.com	\N	User	\N
16	Luffy	Mugiwara	luffy@gmail.com	$2b$10$DoQquTVPUlW42DgfTb01.enq1DWyFF9a.k2dYCu.cUQicj2s2lmh2	User	eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjE2LCJmaXJzdE5hbWUiOiJMdWZmeSIsImxhc3ROYW1lIjoiTXVnaXdhcmEiLCJlbWFpbCI6Imx1ZmZ5QGdtYWlsLmNvbSIsImlhdCI6MTcyMzMzODk0NiwiZXhwIjoxNzIzNDI1MzQ2fQ.Fl6Tcm3bulUl1zc9Y6IwgUn3w5DsOAY6RyUoEhTzsYQ
2	Green	Fn	fortnite@gmail.com	\N	User	\N
7	B	B	B@mail.com	\N	User	\N
8	C	C	C@mail.com	\N	User	\N
9	D	D	D@mail.com	\N	User	\N
4	Connor	Rick	ckr20004@gmail.com	$2b$10$WiYhgpkK68xq1iPds4Hr7e1f/1aogjLwJrDfACz3LxGwre..mOa12	User	eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjQsImZpcnN0TmFtZSI6IkNvbm5vciIsImxhc3ROYW1lIjoiUmljayIsImVtYWlsIjoiY2tyMjAwMDRAZ21haWwuY29tIiwiaWF0IjoxNzIzMDQ0MTk0LCJleHAiOjE3MjMxMzA1OTR9.c2eWWvDzY6w0QhGIrhGYvUh-Okpp2E_5Tmf6adwP0m0
10	E	E	E@mail.com	\N	User	\N
6	A	A	a@mail.com	$2b$10$DoQquTVPUlW42DgfTb01.enq1DWyFF9a.k2dYCu.cUQicj2s2lmh2	User	eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjYsImZpcnN0TmFtZSI6IkEiLCJsYXN0TmFtZSI6IkEiLCJlbWFpbCI6ImFAbWFpbC5jb20iLCJpYXQiOjE3MjM2NjM4NDMsImV4cCI6MTcyMzc1MDI0M30.einSaxMVWmzhZ4zYuPymUg9jIJY5UjpOL2QkUnrcnXw
11	F	F	F@mail.com	\N	User	\N
12	G	G	G@mail.com	\N	User	\N
13	H	H	H@mail.com	\N	User	\N
14	I	I	I@mail.com	\N	User	\N
38	Poosd	Instructor	poosdman@gmail.com	$2b$10$DoQquTVPUlW42DgfTb01.enq1DWyFF9a.k2dYCu.cUQicj2s2lmh2	User	eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjM4LCJmaXJzdE5hbWUiOiJQb29zZCIsImxhc3ROYW1lIjoiSW5zdHJ1Y3RvciIsImVtYWlsIjoicG9vc2RtYW5AZ21haWwuY29tIiwiaWF0IjoxNzIzNTQ5NTIxLCJleHAiOjE3MjM2MzU5MjF9.TdiOTG0jDMiZStB4fAHG9IJhal8VSQIB_ZZ9aqIdPW4
39	Insert	User	insertman44@gg.com	\N	User	\N
84	IAXUI	MRWYN	txewv@mail.com	\N	User	\N
85	CWMXW	FHNDJ	oiorm@mail.com	\N	User	\N
86	QSILH	VRPIN	sfaqu@mail.com	\N	User	\N
87	HWUZC	ZCSPJ	idqwp@mail.com	\N	User	\N
88	LKXSG	HUFIK	zalhu@mail.com	\N	User	\N
89	FFVIH	NLGFM	xtdqx@mail.com	\N	User	\N
90	ALIEO	NXXKJ	tkvrx@mail.com	\N	User	\N
76	Ace	Portgas	portgashash@gmail.com	$2b$10$uExxd7Eqh5pRjJSy203DZ.QNtgTvXSnJzp6xOf4xCalTd4CX4j8D.	User	eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjc2LCJmaXJzdE5hbWUiOiJBY2UiLCJsYXN0TmFtZSI6IlBvcnRnYXMiLCJlbWFpbCI6InBvcnRnYXNoYXNoQGdtYWlsLmNvbSIsImlhdCI6MTcyMzc0NjcwOSwiZXhwIjoxNzIzODMzMTA5fQ.I2Y8HH9kjaNcDzYzDw46Fvr5zWtjMzGp6XFIbG0oTb0
91	NNLGQ	OOKIY	inywy@mail.com	\N	User	\N
92	EQUGC	MXGTN	svzoa@mail.com	\N	User	\N
93	LNXQT	OBCVG	ywfas@mail.com	\N	User	\N
94	PTVIS	NDALU	tldmy@mail.com	\N	User	\N
95	TPRLY	JSGOM	hyaiu@mail.com	\N	User	\N
96	RLYHI	ZBNRV	orarg@mail.com	\N	User	\N
97	YEFQD	NMZUO	zmppv@mail.com	\N	User	\N
98	TPNVM	WSXFI	hulhm@mail.com	\N	User	\N
99	XLDAA	JDXQU	zizyd@mail.com	\N	User	\N
100	YPGDK	DKOCL	mfkkf@mail.com	\N	User	\N
101	QMGRM	SEQUD	tlkmn@mail.com	\N	User	\N
102	GUVEN	FPEEB	kojgu@mail.com	\N	User	\N
103	WXVXN	XLUQA	waqhl@mail.com	\N	User	\N
104	AIXPP	PLPOI	aqsqd@mail.com	\N	User	\N
105	UDJPO	HLKVW	aesjl@mail.com	\N	User	\N
106	DLSUJ	UNVNJ	vjmuj@mail.com	\N	User	\N
107	OUUEF	SUHPK	vpsim@mail.com	\N	User	\N
108	PWMGQ	JEZZH	nwiqp@mail.com	\N	User	\N
109	FTZIL	DOLJF	vtgfv@mail.com	\N	User	\N
110	YESPP	UNJJH	mfenc@mail.com	\N	User	\N
111	XBJCK	IHKVF	yjyjc@mail.com	\N	User	\N
112	PEUED	LEQOW	umsfm@mail.com	\N	User	\N
113	DHFNB	IEUWI	oyawi@mail.com	\N	User	\N
114	UCCCU	UTDKY	oaane@mail.com	\N	User	\N
115	LZVZH	RKYUT	pfqny@mail.com	\N	User	\N
116	OONZC	NTWJL	bswtl@mail.com	\N	User	\N
117	QHPPS	OSLNF	qdbkx@mail.com	\N	User	\N
118	BJVJL	CMZWZ	uziwd@mail.com	\N	User	\N
119	CRUJI	VBAXH	fwqvy@mail.com	\N	User	\N
120	TCLGZ	KMRHV	uupot@mail.com	\N	User	\N
121	RIJME	OYOUE	dmkpn@mail.com	\N	User	\N
122	NZRSX	TRDUZ	hlxnu@mail.com	\N	User	\N
123	KZLPY	YMTQE	kdogb@mail.com	\N	User	\N
124	XMVHI	RKBDU	wwjmo@mail.com	\N	User	\N
125	EUAAR	FZIIG	ihtrz@mail.com	\N	User	\N
126	JGUJA	FFVOI	rtgzx@mail.com	\N	User	\N
127	CYZCB	YRPXA	gctek@mail.com	\N	User	\N
128	MUDMT	GATWW	nyjsr@mail.com	\N	User	\N
129	TQAKI	UHSNM	obmki@mail.com	\N	User	\N
130	IJKRY	UKBPO	utqfd@mail.com	\N	User	\N
131	CKKGT	GAAVR	gblru@mail.com	\N	User	\N
132	XYPAE	IONEC	iryav@mail.com	\N	User	\N
133	BLASM	YYKDB	xgctx@mail.com	\N	User	\N
134	EIVFQ	PRLGK	dbvbx@mail.com	\N	User	\N
135	ZTYYF	VYYXI	rgjco@mail.com	\N	User	\N
136	KTICA	WBNVL	fyvqp@mail.com	\N	User	\N
137	FQQTT	OMXND	ixdzz@mail.com	\N	User	\N
138	MYTEP	ASXUB	sxaqn@mail.com	\N	User	\N
139	ICZMM	RGREO	bjdqu@mail.com	\N	User	\N
140	SVQVX	JZRMR	sswuv@mail.com	\N	User	\N
141	SSONW	HSTTA	tmnkx@mail.com	\N	User	\N
142	QFJID	KJSTN	jzujb@mail.com	\N	User	\N
143	FLTAU	MFQUP	hwlhn@mail.com	\N	User	\N
144	DSKRX	OQOCV	xpige@mail.com	\N	User	\N
145	MHFYU	UOEAO	qdkpv@mail.com	\N	User	\N
146	UNRJB	INCYM	auksf@mail.com	\N	User	\N
147	XNRRR	ZWBBJ	ytgpi@mail.com	\N	User	\N
148	QVFHG	RDTKB	yxsby@mail.com	\N	User	\N
149	FPZEM	SZNZM	lnrui@mail.com	\N	User	\N
150	THCDH	OPNTG	pvnlv@mail.com	\N	User	\N
151	ZKJVA	XGICB	mxdjt@mail.com	\N	User	\N
152	SLLQV	PJVCC	begvg@mail.com	\N	User	\N
153	XUTFK	NQXUL	btmjn@mail.com	\N	User	\N
154	PXNUL	ZLJZW	povrj@mail.com	\N	User	\N
155	EDHFL	TCBDG	tqiun@mail.com	\N	User	\N
156	GWPHL	WPVBY	mvszr@mail.com	\N	User	\N
157	JPKRY	HRBRD	orglh@mail.com	\N	User	\N
158	KTXYA	TFMPD	xiivy@mail.com	\N	User	\N
159	WJWJY	MLNMN	ktfog@mail.com	\N	User	\N
160	SVGEL	YPNLF	gayiv@mail.com	\N	User	\N
161	MQLRN	IPPFP	hkori@mail.com	\N	User	\N
162	MTZZX	AZYJC	dmcba@mail.com	\N	User	\N
163	EIPFS	MABUV	gjktg@mail.com	\N	User	\N
164	NHXNI	FMGPX	gcayb@mail.com	\N	User	\N
165	GGWWL	WTBFA	nhvrn@mail.com	\N	User	\N
166	INCWP	IOZLG	mswjx@mail.com	\N	User	\N
167	QRTFP	USAXI	hblad@mail.com	\N	User	\N
168	UOIWR	IJEWW	mfthe@mail.com	\N	User	\N
169	DJWNO	BUUSJ	wevhw@mail.com	\N	User	\N
170	MOEIW	PDXRK	fmtbw@mail.com	\N	User	\N
171	CZMMM	LSBJM	dphwl@mail.com	\N	User	\N
172	PGFPL	ABJDZ	gtrfe@mail.com	\N	User	\N
173	SCBJS	WXKXZ	clrdt@mail.com	\N	User	\N
174	WHCAO	VAOGG	jvocw@mail.com	\N	User	\N
175	AIEGG	YOCLV	gtfgd@mail.com	\N	User	\N
176	TMZCS	XGXUK	frgig@mail.com	\N	User	\N
177	LUUAL	ODDGI	lcfry@mail.com	\N	User	\N
178	INXLX	VPVNW	ezcwq@mail.com	\N	User	\N
179	IWNBH	ICBQC	gnapl@mail.com	\N	User	\N
180	UKPGU	EPOXE	xsfef@mail.com	\N	User	\N
181	SDURT	THEYH	syqsq@mail.com	\N	User	\N
182	LMMHS	KCIVD	hebrc@mail.com	\N	User	\N
183	BDRIT	JSVKE	bnzqf@mail.com	\N	User	\N
184	BHAWE	JIFVZ	othfl@mail.com	\N	User	\N
185	QYBDM	DSFEB	vzefu@mail.com	\N	User	\N
186	DDIRT	MYOAX	ckqqq@mail.com	\N	User	\N
187	SHFZM	YSKBR	toqfq@mail.com	\N	User	\N
188	WAPZM	KGSCW	vfiot@mail.com	\N	User	\N
189	SFXBK	JRIIK	ciagu@mail.com	\N	User	\N
190	AAYKX	EZASJ	uptem@mail.com	\N	User	\N
191	RGOCD	OMFSQ	wldvi@mail.com	\N	User	\N
192	LBOKT	JVHWP	gibna@mail.com	\N	User	\N
193	SVWPF	LZWRK	vhilj@mail.com	\N	User	\N
194	ARABI	QVIGD	iazwc@mail.com	\N	User	\N
195	YKMOS	BGDRV	mrkdq@mail.com	\N	User	\N
196	QUTIK	LLVJE	fjpjz@mail.com	\N	User	\N
197	AODHW	JPNZM	lgbny@mail.com	\N	User	\N
198	GDDUZ	WHZEK	flvrb@mail.com	\N	User	\N
199	JDUAK	ZLMRE	ncxff@mail.com	\N	User	\N
200	ZEMVX	OKLOE	ltvvm@mail.com	\N	User	\N
201	YHTYO	FZSPO	mmsfp@mail.com	\N	User	\N
202	NEXZW	PTWLR	sfmlt@mail.com	\N	User	\N
203	RRQGP	QNLUW	txuiu@mail.com	\N	User	\N
204	WDMOP	KTMEP	vhmut@mail.com	\N	User	\N
205	NAELJ	TSLZR	blzmx@mail.com	\N	User	\N
206	GYUPS	IUDDT	hjbpa@mail.com	\N	User	\N
207	NUXTU	EZHVS	kdvtl@mail.com	\N	User	\N
208	YDBLQ	QNTRP	tkjaz@mail.com	\N	User	\N
209	XHKCY	YNYPP	tccbz@mail.com	\N	User	\N
210	ZXTQW	LEBDS	axpeh@mail.com	\N	User	\N
211	EESAV	QZNYR	mfoty@mail.com	\N	User	\N
212	GTZJG	UTONU	kixce@mail.com	\N	User	\N
213	GNJOH	SXRXC	fywcj@mail.com	\N	User	\N
214	SICTC	LNIYC	fypss@mail.com	\N	User	\N
215	NFAEY	ROJHC	uavjq@mail.com	\N	User	\N
216	VRKZA	NPPWW	lcnvi@mail.com	\N	User	\N
217	HEEAF	SMKEL	hanrh@mail.com	\N	User	\N
218	RJYLZ	VXLCL	ukksy@mail.com	\N	User	\N
219	BIATJ	TYQDO	onwgx@mail.com	\N	User	\N
220	FNHTP	WHNTV	vgeun@mail.com	\N	User	\N
221	XSKKT	ASKQS	whfeq@mail.com	\N	User	\N
222	FGOAA	ATEWM	xkapa@mail.com	\N	User	\N
223	HVAND	WOYRN	lrzrj@mail.com	\N	User	\N
224	ZMTPL	XXUJW	ldyeg@mail.com	\N	User	\N
225	UUQVX	YTSOO	lgbvy@mail.com	\N	User	\N
226	EJIPE	NNGVR	mnmeq@mail.com	\N	User	\N
227	FBYHU	GHAGC	stcwu@mail.com	\N	User	\N
228	CXWWI	RLYYW	wlajc@mail.com	\N	User	\N
229	YBMBF	ASJRT	rczte@mail.com	\N	User	\N
230	WNGZD	CACRH	jiwmz@mail.com	\N	User	\N
231	IFUNA	JVBPZ	tenwv@mail.com	\N	User	\N
232	VLILB	SSCQW	tpony@mail.com	\N	User	\N
233	BAFQQ	SATIA	yidke@mail.com	\N	User	\N
234	QKLWI	FEHQX	tvumw@mail.com	\N	User	\N
235	PGCXW	LYCRY	hmyvc@mail.com	\N	User	\N
236	ZPPDF	QMYMS	ezace@mail.com	\N	User	\N
237	UQYKD	MNZJW	xnlyi@mail.com	\N	User	\N
238	TTFPT	ZMNHM	hofwp@mail.com	\N	User	\N
239	FXSZQ	EWPPS	zjytr@mail.com	\N	User	\N
240	GIVZU	ITHIG	hgjye@mail.com	\N	User	\N
241	LXYLM	XASSZ	loufm@mail.com	\N	User	\N
242	UAVBT	HLOKC	txepw@mail.com	\N	User	\N
243	GAPMW	SLZRU	aemtu@mail.com	\N	User	\N
244	WVBDX	PGNXV	cftlk@mail.com	\N	User	\N
245	WDMFU	KRRBN	knuhr@mail.com	\N	User	\N
246	BRUTH	MXDTP	cftuo@mail.com	\N	User	\N
247	FGJQL	GXBXF	fdcnh@mail.com	\N	User	\N
248	CBPVV	KTAMN	frnfx@mail.com	\N	User	\N
249	BNIUG	ZBRTG	wdptw@mail.com	\N	User	\N
250	YLLAI	QEFVU	hhvqy@mail.com	\N	User	\N
251	ZKYKH	IAKSS	tioka@mail.com	\N	User	\N
252	MXBJJ	VQCTN	bgmqe@mail.com	\N	User	\N
253	AFHEN	EDNPW	yknyi@mail.com	\N	User	\N
254	EZLJX	SPOMS	igpop@mail.com	\N	User	\N
255	UIXSP	RQMBP	hmtbw@mail.com	\N	User	\N
256	MKKUR	CETNL	decof@mail.com	\N	User	\N
257	QTVAZ	RUQEP	iwqko@mail.com	\N	User	\N
258	GAJPH	JOVPB	vifgp@mail.com	\N	User	\N
259	EMUAI	XJTMS	gjvwr@mail.com	\N	User	\N
260	LUZYX	WFZLO	leqmv@mail.com	\N	User	\N
261	EEJCE	AOYJB	cnzbt@mail.com	\N	User	\N
262	AMBGO	VWOHB	auxqs@mail.com	\N	User	\N
263	KVJPH	OENCY	epabq@mail.com	\N	User	\N
264	KASDA	MSZAF	vkroi@mail.com	\N	User	\N
265	CRFDW	JKYFE	nlhou@mail.com	\N	User	\N
266	QLUHX	FHRCK	kakgh@mail.com	\N	User	\N
267	UEMQN	VAKIF	wyrsq@mail.com	\N	User	\N
268	NJBIK	VILKK	fhjnn@mail.com	\N	User	\N
269	IFJLD	EKSSJ	xpghn@mail.com	\N	User	\N
270	XLILJ	IZUFB	tcuwk@mail.com	\N	User	\N
271	FOSZM	HFLOK	figtw@mail.com	\N	User	\N
272	YXJLU	ESRXZ	ulzzi@mail.com	\N	User	\N
273	JAWFV	HTCUN	hrvfv@mail.com	\N	User	\N
274	VJXDC	HSAKE	yiehu@mail.com	\N	User	\N
275	BQEQB	JBJYL	agrvp@mail.com	\N	User	\N
276	JTDIL	WXNGN	krolm@mail.com	\N	User	\N
277	IKFSE	IUCPH	bcspa@mail.com	\N	User	\N
278	ULJFO	BSAWL	dywvp@mail.com	\N	User	\N
279	IWFUX	GCWXF	xaxyu@mail.com	\N	User	\N
280	KLLJH	KEPNR	xwldq@mail.com	\N	User	\N
281	DBIZT	TPTTQ	pgqbb@mail.com	\N	User	\N
282	XFCRJ	HRLWS	ejvof@mail.com	\N	User	\N
283	NLGUN	ZBXWO	mqqmm@mail.com	\N	User	\N
3	Hash	Brown	hash@gmail.com	$2b$10$DoQquTVPUlW42DgfTb01.enq1DWyFF9a.k2dYCu.cUQicj2s2lmh2	Admin	eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjMsImZpcnN0TmFtZSI6Ikhhc2giLCJsYXN0TmFtZSI6IkJyb3duIiwiZW1haWwiOiJoYXNoQGdtYWlsLmNvbSIsImlhdCI6MTcyNDI5MzE5MCwiZXhwIjoxNzI0Mzc5NTkwfQ.4IU-nNZu9PGiJE_hJDgO1qzyf5l_plVr54vX3W4zNWo
285	Aisha	Fathalla	aishafathalla1@hotmail.com	\N	User	\N
83	Aisha	Fathalla	afathalla1@hotmail.com	$2b$10$RFGQz8KGSbeWS5GxFtliWOILM2zToUhj3nNpO5ZmWgb4ijIhhg5HO	Admin	eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjgzLCJmaXJzdE5hbWUiOiJBaXNoYSIsImxhc3ROYW1lIjoiRmF0aGFsbGEiLCJlbWFpbCI6ImFmYXRoYWxsYTFAaG90bWFpbC5jb20iLCJpYXQiOjE3MjQwNDY5NDUsImV4cCI6MTcyNDEzMzM0NX0.GYRvaRbkp9aBEZ1G_Vgejc2S8N7Ujodd690phjmT-d0
15	Mob	Mob	mob@gmail.com	$2b$10$DoQquTVPUlW42DgfTb01.enq1DWyFF9a.k2dYCu.cUQicj2s2lmh2	User	eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjE1LCJmaXJzdE5hbWUiOiJNb2IiLCJsYXN0TmFtZSI6Ik1vYiIsImVtYWlsIjoibW9iQGdtYWlsLmNvbSIsImlhdCI6MTcyNDI5MjAyNCwiZXhwIjoxNzI0Mzc4NDI0fQ.sPZXqLBZoSPJwRLLyDq_pYoRFoA14xnFLU9CRVSAzsI
\.


--
-- Data for Name: workspaces; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.workspaces (id, name) FROM stdin;
4	The best workspace
5	POOSD
7	9AM
27	Aisha's Quran Class
28	Aisha's Physics Class
30	Aisha Arabic Class
34	FAU COT
35	SD1
\.


--
-- Data for Name: messages; Type: TABLE DATA; Schema: realtime; Owner: supabase_realtime_admin
--

COPY realtime.messages (id, topic, extension, inserted_at, updated_at) FROM stdin;
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.schema_migrations (version, inserted_at) FROM stdin;
20211116024918	2024-08-05 22:50:07
20211116045059	2024-08-05 22:50:07
20211116050929	2024-08-05 22:50:07
20211116051442	2024-08-05 22:50:07
20211116212300	2024-08-05 22:50:08
20211116213355	2024-08-05 22:50:08
20211116213934	2024-08-05 22:50:08
20211116214523	2024-08-05 22:50:08
20211122062447	2024-08-05 22:50:08
20211124070109	2024-08-05 22:50:08
20211202204204	2024-08-05 22:50:08
20211202204605	2024-08-05 22:50:08
20211210212804	2024-08-05 22:50:08
20211228014915	2024-08-05 22:50:08
20220107221237	2024-08-05 22:50:08
20220228202821	2024-08-05 22:50:08
20220312004840	2024-08-05 22:50:08
20220603231003	2024-08-05 22:50:08
20220603232444	2024-08-05 22:50:08
20220615214548	2024-08-05 22:50:08
20220712093339	2024-08-05 22:50:08
20220908172859	2024-08-05 22:50:08
20220916233421	2024-08-05 22:50:08
20230119133233	2024-08-05 22:50:08
20230128025114	2024-08-05 22:50:08
20230128025212	2024-08-05 22:50:08
20230227211149	2024-08-05 22:50:08
20230228184745	2024-08-05 22:50:08
20230308225145	2024-08-05 22:50:08
20230328144023	2024-08-05 22:50:08
20231018144023	2024-08-05 22:50:08
20231204144023	2024-08-05 22:50:08
20231204144024	2024-08-05 22:50:08
20231204144025	2024-08-05 22:50:08
20240108234812	2024-08-05 22:50:08
20240109165339	2024-08-05 22:50:08
20240227174441	2024-08-05 22:50:08
20240311171622	2024-08-05 22:50:08
20240321100241	2024-08-05 22:50:08
20240401105812	2024-08-05 22:50:08
20240418121054	2024-08-05 22:50:08
20240523004032	2024-08-05 22:50:08
20240618124746	2024-08-05 22:50:08
20240801235015	2024-08-07 15:29:14
20240805133720	2024-08-07 15:29:14
\.


--
-- Data for Name: subscription; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.subscription (id, subscription_id, entity, filters, claims, created_at) FROM stdin;
\.


--
-- Data for Name: buckets; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.buckets (id, name, owner, created_at, updated_at, public, avif_autodetection, file_size_limit, allowed_mime_types, owner_id) FROM stdin;
\.


--
-- Data for Name: migrations; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.migrations (id, name, hash, executed_at) FROM stdin;
0	create-migrations-table	e18db593bcde2aca2a408c4d1100f6abba2195df	2024-08-05 22:47:37.173754
1	initialmigration	6ab16121fbaa08bbd11b712d05f358f9b555d777	2024-08-05 22:47:37.234786
2	storage-schema	5c7968fd083fcea04050c1b7f6253c9771b99011	2024-08-05 22:47:37.319384
3	pathtoken-column	2cb1b0004b817b29d5b0a971af16bafeede4b70d	2024-08-05 22:47:37.394945
4	add-migrations-rls	427c5b63fe1c5937495d9c635c263ee7a5905058	2024-08-05 22:47:37.492949
5	add-size-functions	79e081a1455b63666c1294a440f8ad4b1e6a7f84	2024-08-05 22:47:37.551264
6	change-column-name-in-get-size	f93f62afdf6613ee5e7e815b30d02dc990201044	2024-08-05 22:47:37.605315
7	add-rls-to-buckets	e7e7f86adbc51049f341dfe8d30256c1abca17aa	2024-08-05 22:47:37.660942
8	add-public-to-buckets	fd670db39ed65f9d08b01db09d6202503ca2bab3	2024-08-05 22:47:37.719432
9	fix-search-function	3a0af29f42e35a4d101c259ed955b67e1bee6825	2024-08-05 22:47:37.782857
10	search-files-search-function	68dc14822daad0ffac3746a502234f486182ef6e	2024-08-05 22:47:37.846978
11	add-trigger-to-auto-update-updated_at-column	7425bdb14366d1739fa8a18c83100636d74dcaa2	2024-08-05 22:47:37.857558
12	add-automatic-avif-detection-flag	8e92e1266eb29518b6a4c5313ab8f29dd0d08df9	2024-08-05 22:47:37.912597
13	add-bucket-custom-limits	cce962054138135cd9a8c4bcd531598684b25e7d	2024-08-05 22:47:37.966741
14	use-bytes-for-max-size	941c41b346f9802b411f06f30e972ad4744dad27	2024-08-05 22:47:38.020862
15	add-can-insert-object-function	934146bc38ead475f4ef4b555c524ee5d66799e5	2024-08-05 22:47:38.063071
16	add-version	76debf38d3fd07dcfc747ca49096457d95b1221b	2024-08-05 22:47:38.117737
17	drop-owner-foreign-key	f1cbb288f1b7a4c1eb8c38504b80ae2a0153d101	2024-08-05 22:47:38.136335
18	add_owner_id_column_deprecate_owner	e7a511b379110b08e2f214be852c35414749fe66	2024-08-05 22:47:38.149789
19	alter-default-value-objects-id	02e5e22a78626187e00d173dc45f58fa66a4f043	2024-08-05 22:47:38.216875
20	list-objects-with-delimiter	cd694ae708e51ba82bf012bba00caf4f3b6393b7	2024-08-05 22:47:38.232042
21	s3-multipart-uploads	8c804d4a566c40cd1e4cc5b3725a664a9303657f	2024-08-05 22:47:38.251649
22	s3-multipart-uploads-big-ints	9737dc258d2397953c9953d9b86920b8be0cdb73	2024-08-05 22:47:38.328557
23	optimize-search-function	9d7e604cddc4b56a5422dc68c9313f4a1b6f132c	2024-08-05 22:47:38.357546
24	operation-function	8312e37c2bf9e76bbe841aa5fda889206d2bf8aa	2024-08-05 22:47:38.371882
25	custom-metadata	67eb93b7e8d401cafcdc97f9ac779e71a79bfe03	2024-08-08 16:11:28.08299
\.


--
-- Data for Name: objects; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.objects (id, bucket_id, name, owner, created_at, updated_at, last_accessed_at, metadata, version, owner_id, user_metadata) FROM stdin;
\.


--
-- Data for Name: s3_multipart_uploads; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads (id, in_progress_size, upload_signature, bucket_id, key, version, owner_id, created_at, user_metadata) FROM stdin;
\.


--
-- Data for Name: s3_multipart_uploads_parts; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads_parts (id, upload_id, size, part_number, bucket_id, key, etag, owner_id, version, created_at) FROM stdin;
\.


--
-- Data for Name: secrets; Type: TABLE DATA; Schema: vault; Owner: supabase_admin
--

COPY vault.secrets (id, name, description, secret, key_id, nonce, created_at, updated_at) FROM stdin;
\.


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE SET; Schema: auth; Owner: supabase_auth_admin
--

SELECT pg_catalog.setval('auth.refresh_tokens_id_seq', 1, false);


--
-- Name: key_key_id_seq; Type: SEQUENCE SET; Schema: pgsodium; Owner: supabase_admin
--

SELECT pg_catalog.setval('pgsodium.key_key_id_seq', 1, false);


--
-- Name: assignments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.assignments_id_seq', 15, true);


--
-- Name: groups_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.groups_id_seq', 493, true);


--
-- Name: journal_assignments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.journal_assignments_id_seq', 104, true);


--
-- Name: journal_entries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.journal_entries_id_seq', 17, true);


--
-- Name: questions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.questions_id_seq', 40, true);


--
-- Name: reviews_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.reviews_id_seq', 1936, true);


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.users_id_seq', 496, true);


--
-- Name: workspaces_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.workspaces_id_seq', 35, true);


--
-- Name: messages_id_seq; Type: SEQUENCE SET; Schema: realtime; Owner: supabase_realtime_admin
--

SELECT pg_catalog.setval('realtime.messages_id_seq', 1, false);


--
-- Name: subscription_id_seq; Type: SEQUENCE SET; Schema: realtime; Owner: supabase_admin
--

SELECT pg_catalog.setval('realtime.subscription_id_seq', 1, false);


--
-- Name: mfa_amr_claims amr_id_pk; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT amr_id_pk PRIMARY KEY (id);


--
-- Name: audit_log_entries audit_log_entries_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.audit_log_entries
    ADD CONSTRAINT audit_log_entries_pkey PRIMARY KEY (id);


--
-- Name: flow_state flow_state_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.flow_state
    ADD CONSTRAINT flow_state_pkey PRIMARY KEY (id);


--
-- Name: identities identities_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_pkey PRIMARY KEY (id);


--
-- Name: identities identities_provider_id_provider_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_provider_id_provider_unique UNIQUE (provider_id, provider);


--
-- Name: instances instances_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.instances
    ADD CONSTRAINT instances_pkey PRIMARY KEY (id);


--
-- Name: mfa_amr_claims mfa_amr_claims_session_id_authentication_method_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_authentication_method_pkey UNIQUE (session_id, authentication_method);


--
-- Name: mfa_challenges mfa_challenges_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_pkey PRIMARY KEY (id);


--
-- Name: mfa_factors mfa_factors_last_challenged_at_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_last_challenged_at_key UNIQUE (last_challenged_at);


--
-- Name: mfa_factors mfa_factors_phone_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_phone_key UNIQUE (phone);


--
-- Name: mfa_factors mfa_factors_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_pkey PRIMARY KEY (id);


--
-- Name: one_time_tokens one_time_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.one_time_tokens
    ADD CONSTRAINT one_time_tokens_pkey PRIMARY KEY (id);


--
-- Name: refresh_tokens refresh_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_pkey PRIMARY KEY (id);


--
-- Name: refresh_tokens refresh_tokens_token_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_token_unique UNIQUE (token);


--
-- Name: saml_providers saml_providers_entity_id_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_entity_id_key UNIQUE (entity_id);


--
-- Name: saml_providers saml_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_pkey PRIMARY KEY (id);


--
-- Name: saml_relay_states saml_relay_states_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_pkey PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: sessions sessions_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_pkey PRIMARY KEY (id);


--
-- Name: sso_domains sso_domains_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_pkey PRIMARY KEY (id);


--
-- Name: sso_providers sso_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_providers
    ADD CONSTRAINT sso_providers_pkey PRIMARY KEY (id);


--
-- Name: users users_phone_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_phone_key UNIQUE (phone);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: analytics analytics_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.analytics
    ADD CONSTRAINT analytics_pkey PRIMARY KEY (user_id, assignment_id);


--
-- Name: assignments assignments_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.assignments
    ADD CONSTRAINT assignments_pkey PRIMARY KEY (id);


--
-- Name: groups groups_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.groups
    ADD CONSTRAINT groups_pkey PRIMARY KEY (id);


--
-- Name: groups groups_workspace_id_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.groups
    ADD CONSTRAINT groups_workspace_id_name_key UNIQUE (workspace_id, name);


--
-- Name: journal_assignments journal_assignments_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.journal_assignments
    ADD CONSTRAINT journal_assignments_pkey PRIMARY KEY (id);


--
-- Name: journal_assignments journal_assignments_workspace_id_week_number_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.journal_assignments
    ADD CONSTRAINT journal_assignments_workspace_id_week_number_key UNIQUE (workspace_id, week_number);


--
-- Name: journal_entries journal_entries_journal_assignment_id_user_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.journal_entries
    ADD CONSTRAINT journal_entries_journal_assignment_id_user_id_key UNIQUE (journal_assignment_id, user_id);


--
-- Name: journal_entries journal_entries_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.journal_entries
    ADD CONSTRAINT journal_entries_pkey PRIMARY KEY (id);


--
-- Name: memberships memberships_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.memberships
    ADD CONSTRAINT memberships_pkey PRIMARY KEY (user_id, workspace_id);


--
-- Name: password_reset password_reset_email_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.password_reset
    ADD CONSTRAINT password_reset_email_key UNIQUE (email);


--
-- Name: password_reset password_reset_reset_token_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.password_reset
    ADD CONSTRAINT password_reset_reset_token_key UNIQUE (reset_token);


--
-- Name: questions questions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.questions
    ADD CONSTRAINT questions_pkey PRIMARY KEY (id);


--
-- Name: ratings ratings_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ratings
    ADD CONSTRAINT ratings_pkey PRIMARY KEY (review_id, question_id);


--
-- Name: reviews reviews_assignment_id_user_id_target_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.reviews
    ADD CONSTRAINT reviews_assignment_id_user_id_target_id_key UNIQUE (assignment_id, user_id, target_id);


--
-- Name: reviews reviews_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.reviews
    ADD CONSTRAINT reviews_pkey PRIMARY KEY (id);


--
-- Name: users users_email_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_email_key UNIQUE (email);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: workspaces workspaces_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.workspaces
    ADD CONSTRAINT workspaces_pkey PRIMARY KEY (id);


--
-- Name: messages messages_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE ONLY realtime.messages
    ADD CONSTRAINT messages_pkey PRIMARY KEY (id);


--
-- Name: subscription pk_subscription; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.subscription
    ADD CONSTRAINT pk_subscription PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: buckets buckets_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.buckets
    ADD CONSTRAINT buckets_pkey PRIMARY KEY (id);


--
-- Name: migrations migrations_name_key; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_name_key UNIQUE (name);


--
-- Name: migrations migrations_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_pkey PRIMARY KEY (id);


--
-- Name: objects objects_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT objects_pkey PRIMARY KEY (id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_pkey PRIMARY KEY (id);


--
-- Name: s3_multipart_uploads s3_multipart_uploads_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads
    ADD CONSTRAINT s3_multipart_uploads_pkey PRIMARY KEY (id);


--
-- Name: audit_logs_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX audit_logs_instance_id_idx ON auth.audit_log_entries USING btree (instance_id);


--
-- Name: confirmation_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX confirmation_token_idx ON auth.users USING btree (confirmation_token) WHERE ((confirmation_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: email_change_token_current_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_current_idx ON auth.users USING btree (email_change_token_current) WHERE ((email_change_token_current)::text !~ '^[0-9 ]*$'::text);


--
-- Name: email_change_token_new_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_new_idx ON auth.users USING btree (email_change_token_new) WHERE ((email_change_token_new)::text !~ '^[0-9 ]*$'::text);


--
-- Name: factor_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX factor_id_created_at_idx ON auth.mfa_factors USING btree (user_id, created_at);


--
-- Name: flow_state_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX flow_state_created_at_idx ON auth.flow_state USING btree (created_at DESC);


--
-- Name: identities_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_email_idx ON auth.identities USING btree (email text_pattern_ops);


--
-- Name: INDEX identities_email_idx; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.identities_email_idx IS 'Auth: Ensures indexed queries on the email column';


--
-- Name: identities_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_user_id_idx ON auth.identities USING btree (user_id);


--
-- Name: idx_auth_code; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_auth_code ON auth.flow_state USING btree (auth_code);


--
-- Name: idx_user_id_auth_method; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_user_id_auth_method ON auth.flow_state USING btree (user_id, authentication_method);


--
-- Name: mfa_challenge_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_challenge_created_at_idx ON auth.mfa_challenges USING btree (created_at DESC);


--
-- Name: mfa_factors_user_friendly_name_unique; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX mfa_factors_user_friendly_name_unique ON auth.mfa_factors USING btree (friendly_name, user_id) WHERE (TRIM(BOTH FROM friendly_name) <> ''::text);


--
-- Name: mfa_factors_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_factors_user_id_idx ON auth.mfa_factors USING btree (user_id);


--
-- Name: one_time_tokens_relates_to_hash_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX one_time_tokens_relates_to_hash_idx ON auth.one_time_tokens USING hash (relates_to);


--
-- Name: one_time_tokens_token_hash_hash_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX one_time_tokens_token_hash_hash_idx ON auth.one_time_tokens USING hash (token_hash);


--
-- Name: one_time_tokens_user_id_token_type_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX one_time_tokens_user_id_token_type_key ON auth.one_time_tokens USING btree (user_id, token_type);


--
-- Name: reauthentication_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX reauthentication_token_idx ON auth.users USING btree (reauthentication_token) WHERE ((reauthentication_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: recovery_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX recovery_token_idx ON auth.users USING btree (recovery_token) WHERE ((recovery_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: refresh_tokens_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_idx ON auth.refresh_tokens USING btree (instance_id);


--
-- Name: refresh_tokens_instance_id_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_user_id_idx ON auth.refresh_tokens USING btree (instance_id, user_id);


--
-- Name: refresh_tokens_parent_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_parent_idx ON auth.refresh_tokens USING btree (parent);


--
-- Name: refresh_tokens_session_id_revoked_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_session_id_revoked_idx ON auth.refresh_tokens USING btree (session_id, revoked);


--
-- Name: refresh_tokens_updated_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_updated_at_idx ON auth.refresh_tokens USING btree (updated_at DESC);


--
-- Name: saml_providers_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_providers_sso_provider_id_idx ON auth.saml_providers USING btree (sso_provider_id);


--
-- Name: saml_relay_states_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_created_at_idx ON auth.saml_relay_states USING btree (created_at DESC);


--
-- Name: saml_relay_states_for_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_for_email_idx ON auth.saml_relay_states USING btree (for_email);


--
-- Name: saml_relay_states_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_sso_provider_id_idx ON auth.saml_relay_states USING btree (sso_provider_id);


--
-- Name: sessions_not_after_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_not_after_idx ON auth.sessions USING btree (not_after DESC);


--
-- Name: sessions_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_user_id_idx ON auth.sessions USING btree (user_id);


--
-- Name: sso_domains_domain_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_domains_domain_idx ON auth.sso_domains USING btree (lower(domain));


--
-- Name: sso_domains_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sso_domains_sso_provider_id_idx ON auth.sso_domains USING btree (sso_provider_id);


--
-- Name: sso_providers_resource_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_providers_resource_id_idx ON auth.sso_providers USING btree (lower(resource_id));


--
-- Name: unique_verified_phone_factor; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX unique_verified_phone_factor ON auth.mfa_factors USING btree (user_id, phone);


--
-- Name: user_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX user_id_created_at_idx ON auth.sessions USING btree (user_id, created_at);


--
-- Name: users_email_partial_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX users_email_partial_key ON auth.users USING btree (email) WHERE (is_sso_user = false);


--
-- Name: INDEX users_email_partial_key; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.users_email_partial_key IS 'Auth: A partial unique index that applies only when is_sso_user is false';


--
-- Name: users_instance_id_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_email_idx ON auth.users USING btree (instance_id, lower((email)::text));


--
-- Name: users_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_idx ON auth.users USING btree (instance_id);


--
-- Name: users_is_anonymous_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_is_anonymous_idx ON auth.users USING btree (is_anonymous);


--
-- Name: ix_realtime_subscription_entity; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE INDEX ix_realtime_subscription_entity ON realtime.subscription USING hash (entity);


--
-- Name: messages_topic_index; Type: INDEX; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE INDEX messages_topic_index ON realtime.messages USING btree (topic);


--
-- Name: subscription_subscription_id_entity_filters_key; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE UNIQUE INDEX subscription_subscription_id_entity_filters_key ON realtime.subscription USING btree (subscription_id, entity, filters);


--
-- Name: bname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bname ON storage.buckets USING btree (name);


--
-- Name: bucketid_objname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bucketid_objname ON storage.objects USING btree (bucket_id, name);


--
-- Name: idx_multipart_uploads_list; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_multipart_uploads_list ON storage.s3_multipart_uploads USING btree (bucket_id, key, created_at);


--
-- Name: idx_objects_bucket_id_name; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_objects_bucket_id_name ON storage.objects USING btree (bucket_id, name COLLATE "C");


--
-- Name: name_prefix_search; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX name_prefix_search ON storage.objects USING btree (name text_pattern_ops);


--
-- Name: subscription tr_check_filters; Type: TRIGGER; Schema: realtime; Owner: supabase_admin
--

CREATE TRIGGER tr_check_filters BEFORE INSERT OR UPDATE ON realtime.subscription FOR EACH ROW EXECUTE FUNCTION realtime.subscription_check_filters();


--
-- Name: objects update_objects_updated_at; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER update_objects_updated_at BEFORE UPDATE ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.update_updated_at_column();


--
-- Name: identities identities_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: mfa_amr_claims mfa_amr_claims_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- Name: mfa_challenges mfa_challenges_auth_factor_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_auth_factor_id_fkey FOREIGN KEY (factor_id) REFERENCES auth.mfa_factors(id) ON DELETE CASCADE;


--
-- Name: mfa_factors mfa_factors_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: one_time_tokens one_time_tokens_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.one_time_tokens
    ADD CONSTRAINT one_time_tokens_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: refresh_tokens refresh_tokens_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- Name: saml_providers saml_providers_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: saml_relay_states saml_relay_states_flow_state_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_flow_state_id_fkey FOREIGN KEY (flow_state_id) REFERENCES auth.flow_state(id) ON DELETE CASCADE;


--
-- Name: saml_relay_states saml_relay_states_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: sessions sessions_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: sso_domains sso_domains_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: analytics analytics_assignment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.analytics
    ADD CONSTRAINT analytics_assignment_id_fkey FOREIGN KEY (assignment_id) REFERENCES public.assignments(id) ON DELETE CASCADE;


--
-- Name: analytics analytics_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.analytics
    ADD CONSTRAINT analytics_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: assignments assignments_workspace_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.assignments
    ADD CONSTRAINT assignments_workspace_id_fkey FOREIGN KEY (workspace_id) REFERENCES public.workspaces(id) ON DELETE CASCADE;


--
-- Name: groups groups_workspace_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.groups
    ADD CONSTRAINT groups_workspace_id_fkey FOREIGN KEY (workspace_id) REFERENCES public.workspaces(id) ON DELETE CASCADE;


--
-- Name: journal_assignments journal_assignments_workspace_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.journal_assignments
    ADD CONSTRAINT journal_assignments_workspace_id_fkey FOREIGN KEY (workspace_id) REFERENCES public.workspaces(id) ON DELETE CASCADE;


--
-- Name: journal_entries journal_entries_journal_assignment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.journal_entries
    ADD CONSTRAINT journal_entries_journal_assignment_id_fkey FOREIGN KEY (journal_assignment_id) REFERENCES public.journal_assignments(id) ON DELETE CASCADE;


--
-- Name: journal_entries journal_entries_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.journal_entries
    ADD CONSTRAINT journal_entries_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: memberships memberships_group_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.memberships
    ADD CONSTRAINT memberships_group_id_fkey FOREIGN KEY (group_id) REFERENCES public.groups(id) ON DELETE SET NULL;


--
-- Name: memberships memberships_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.memberships
    ADD CONSTRAINT memberships_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: memberships memberships_workspace_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.memberships
    ADD CONSTRAINT memberships_workspace_id_fkey FOREIGN KEY (workspace_id) REFERENCES public.workspaces(id) ON DELETE CASCADE;


--
-- Name: password_reset password_reset_email_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.password_reset
    ADD CONSTRAINT password_reset_email_fkey FOREIGN KEY (email) REFERENCES public.users(email) ON DELETE CASCADE;


--
-- Name: questions questions_assignment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.questions
    ADD CONSTRAINT questions_assignment_id_fkey FOREIGN KEY (assignment_id) REFERENCES public.assignments(id) ON DELETE CASCADE;


--
-- Name: ratings ratings_question_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ratings
    ADD CONSTRAINT ratings_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.questions(id) ON DELETE CASCADE;


--
-- Name: ratings ratings_review_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ratings
    ADD CONSTRAINT ratings_review_id_fkey FOREIGN KEY (review_id) REFERENCES public.reviews(id) ON DELETE CASCADE;


--
-- Name: reviews reviews_assignment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.reviews
    ADD CONSTRAINT reviews_assignment_id_fkey FOREIGN KEY (assignment_id) REFERENCES public.assignments(id) ON DELETE CASCADE;


--
-- Name: reviews reviews_group_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.reviews
    ADD CONSTRAINT reviews_group_id_fkey FOREIGN KEY (group_id) REFERENCES public.groups(id) ON DELETE CASCADE;


--
-- Name: reviews reviews_target_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.reviews
    ADD CONSTRAINT reviews_target_id_fkey FOREIGN KEY (target_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: reviews reviews_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.reviews
    ADD CONSTRAINT reviews_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: objects objects_bucketId_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT "objects_bucketId_fkey" FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads s3_multipart_uploads_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads
    ADD CONSTRAINT s3_multipart_uploads_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_upload_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_upload_id_fkey FOREIGN KEY (upload_id) REFERENCES storage.s3_multipart_uploads(id) ON DELETE CASCADE;


--
-- Name: audit_log_entries; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.audit_log_entries ENABLE ROW LEVEL SECURITY;

--
-- Name: flow_state; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.flow_state ENABLE ROW LEVEL SECURITY;

--
-- Name: identities; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.identities ENABLE ROW LEVEL SECURITY;

--
-- Name: instances; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.instances ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_amr_claims; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_amr_claims ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_challenges; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_challenges ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_factors; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_factors ENABLE ROW LEVEL SECURITY;

--
-- Name: one_time_tokens; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.one_time_tokens ENABLE ROW LEVEL SECURITY;

--
-- Name: refresh_tokens; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.refresh_tokens ENABLE ROW LEVEL SECURITY;

--
-- Name: saml_providers; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.saml_providers ENABLE ROW LEVEL SECURITY;

--
-- Name: saml_relay_states; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.saml_relay_states ENABLE ROW LEVEL SECURITY;

--
-- Name: schema_migrations; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.schema_migrations ENABLE ROW LEVEL SECURITY;

--
-- Name: sessions; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sessions ENABLE ROW LEVEL SECURITY;

--
-- Name: sso_domains; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sso_domains ENABLE ROW LEVEL SECURITY;

--
-- Name: sso_providers; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sso_providers ENABLE ROW LEVEL SECURITY;

--
-- Name: users; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.users ENABLE ROW LEVEL SECURITY;

--
-- Name: messages; Type: ROW SECURITY; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE realtime.messages ENABLE ROW LEVEL SECURITY;

--
-- Name: buckets; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.buckets ENABLE ROW LEVEL SECURITY;

--
-- Name: migrations; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.migrations ENABLE ROW LEVEL SECURITY;

--
-- Name: objects; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;

--
-- Name: s3_multipart_uploads; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.s3_multipart_uploads ENABLE ROW LEVEL SECURITY;

--
-- Name: s3_multipart_uploads_parts; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.s3_multipart_uploads_parts ENABLE ROW LEVEL SECURITY;

--
-- Name: supabase_realtime; Type: PUBLICATION; Schema: -; Owner: postgres
--

CREATE PUBLICATION supabase_realtime WITH (publish = 'insert, update, delete, truncate');


ALTER PUBLICATION supabase_realtime OWNER TO postgres;

--
-- Name: SCHEMA auth; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA auth TO anon;
GRANT USAGE ON SCHEMA auth TO authenticated;
GRANT USAGE ON SCHEMA auth TO service_role;
GRANT ALL ON SCHEMA auth TO supabase_auth_admin;
GRANT ALL ON SCHEMA auth TO dashboard_user;
GRANT ALL ON SCHEMA auth TO postgres;


--
-- Name: SCHEMA extensions; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA extensions TO anon;
GRANT USAGE ON SCHEMA extensions TO authenticated;
GRANT USAGE ON SCHEMA extensions TO service_role;
GRANT ALL ON SCHEMA extensions TO dashboard_user;


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: pg_database_owner
--

GRANT USAGE ON SCHEMA public TO postgres;
GRANT USAGE ON SCHEMA public TO anon;
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO service_role;


--
-- Name: SCHEMA realtime; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA realtime TO postgres;
GRANT USAGE ON SCHEMA realtime TO anon;
GRANT USAGE ON SCHEMA realtime TO authenticated;
GRANT USAGE ON SCHEMA realtime TO service_role;
GRANT ALL ON SCHEMA realtime TO supabase_realtime_admin;


--
-- Name: SCHEMA storage; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT ALL ON SCHEMA storage TO postgres;
GRANT USAGE ON SCHEMA storage TO anon;
GRANT USAGE ON SCHEMA storage TO authenticated;
GRANT USAGE ON SCHEMA storage TO service_role;
GRANT ALL ON SCHEMA storage TO supabase_storage_admin;
GRANT ALL ON SCHEMA storage TO dashboard_user;


--
-- Name: FUNCTION email(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.email() TO dashboard_user;
GRANT ALL ON FUNCTION auth.email() TO postgres;


--
-- Name: FUNCTION jwt(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.jwt() TO postgres;
GRANT ALL ON FUNCTION auth.jwt() TO dashboard_user;


--
-- Name: FUNCTION role(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.role() TO dashboard_user;
GRANT ALL ON FUNCTION auth.role() TO postgres;


--
-- Name: FUNCTION uid(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.uid() TO dashboard_user;
GRANT ALL ON FUNCTION auth.uid() TO postgres;


--
-- Name: FUNCTION algorithm_sign(signables text, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION armor(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.armor(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea) TO dashboard_user;


--
-- Name: FUNCTION armor(bytea, text[], text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO dashboard_user;


--
-- Name: FUNCTION crypt(text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.crypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.crypt(text, text) TO dashboard_user;


--
-- Name: FUNCTION dearmor(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.dearmor(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.dearmor(text) TO dashboard_user;


--
-- Name: FUNCTION decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION decrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION digest(bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION digest(text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.digest(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(text, text) TO dashboard_user;


--
-- Name: FUNCTION encrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION encrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION gen_random_bytes(integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO dashboard_user;


--
-- Name: FUNCTION gen_random_uuid(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO dashboard_user;


--
-- Name: FUNCTION gen_salt(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gen_salt(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text) TO dashboard_user;


--
-- Name: FUNCTION gen_salt(text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO dashboard_user;


--
-- Name: FUNCTION grant_pg_cron_access(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.grant_pg_cron_access() FROM postgres;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO dashboard_user;


--
-- Name: FUNCTION grant_pg_graphql_access(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.grant_pg_graphql_access() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION grant_pg_net_access(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.grant_pg_net_access() FROM postgres;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO dashboard_user;


--
-- Name: FUNCTION hmac(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION hmac(text, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements_reset(userid oid, dbid oid, queryid bigint); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) TO dashboard_user;


--
-- Name: FUNCTION pgp_armor_headers(text, OUT key text, OUT value text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO dashboard_user;


--
-- Name: FUNCTION pgp_key_id(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgrst_ddl_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_ddl_watch() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgrst_drop_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_drop_watch() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION set_graphql_placeholder(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.set_graphql_placeholder() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION sign(payload json, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION try_cast_double(inp text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.try_cast_double(inp text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.try_cast_double(inp text) TO dashboard_user;


--
-- Name: FUNCTION url_decode(data text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.url_decode(data text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.url_decode(data text) TO dashboard_user;


--
-- Name: FUNCTION url_encode(data bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.url_encode(data bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.url_encode(data bytea) TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v1(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v1mc(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v3(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v4(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v5(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO dashboard_user;


--
-- Name: FUNCTION uuid_nil(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_nil() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_nil() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_dns(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_oid(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_url(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_x500(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO dashboard_user;


--
-- Name: FUNCTION verify(token text, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION comment_directive(comment_ text); Type: ACL; Schema: graphql; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql.comment_directive(comment_ text) TO postgres;
GRANT ALL ON FUNCTION graphql.comment_directive(comment_ text) TO anon;
GRANT ALL ON FUNCTION graphql.comment_directive(comment_ text) TO authenticated;
GRANT ALL ON FUNCTION graphql.comment_directive(comment_ text) TO service_role;


--
-- Name: FUNCTION exception(message text); Type: ACL; Schema: graphql; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql.exception(message text) TO postgres;
GRANT ALL ON FUNCTION graphql.exception(message text) TO anon;
GRANT ALL ON FUNCTION graphql.exception(message text) TO authenticated;
GRANT ALL ON FUNCTION graphql.exception(message text) TO service_role;


--
-- Name: FUNCTION get_schema_version(); Type: ACL; Schema: graphql; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql.get_schema_version() TO postgres;
GRANT ALL ON FUNCTION graphql.get_schema_version() TO anon;
GRANT ALL ON FUNCTION graphql.get_schema_version() TO authenticated;
GRANT ALL ON FUNCTION graphql.get_schema_version() TO service_role;


--
-- Name: FUNCTION increment_schema_version(); Type: ACL; Schema: graphql; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql.increment_schema_version() TO postgres;
GRANT ALL ON FUNCTION graphql.increment_schema_version() TO anon;
GRANT ALL ON FUNCTION graphql.increment_schema_version() TO authenticated;
GRANT ALL ON FUNCTION graphql.increment_schema_version() TO service_role;


--
-- Name: FUNCTION graphql("operationName" text, query text, variables jsonb, extensions jsonb); Type: ACL; Schema: graphql_public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO postgres;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO anon;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO authenticated;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO service_role;


--
-- Name: FUNCTION lo_export(oid, text); Type: ACL; Schema: pg_catalog; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION pg_catalog.lo_export(oid, text) FROM postgres;
GRANT ALL ON FUNCTION pg_catalog.lo_export(oid, text) TO supabase_admin;


--
-- Name: FUNCTION lo_import(text); Type: ACL; Schema: pg_catalog; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION pg_catalog.lo_import(text) FROM postgres;
GRANT ALL ON FUNCTION pg_catalog.lo_import(text) TO supabase_admin;


--
-- Name: FUNCTION lo_import(text, oid); Type: ACL; Schema: pg_catalog; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION pg_catalog.lo_import(text, oid) FROM postgres;
GRANT ALL ON FUNCTION pg_catalog.lo_import(text, oid) TO supabase_admin;


--
-- Name: FUNCTION get_auth(p_usename text); Type: ACL; Schema: pgbouncer; Owner: postgres
--

REVOKE ALL ON FUNCTION pgbouncer.get_auth(p_usename text) FROM PUBLIC;
GRANT ALL ON FUNCTION pgbouncer.get_auth(p_usename text) TO pgbouncer;


--
-- Name: FUNCTION crypto_aead_det_decrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea); Type: ACL; Schema: pgsodium; Owner: pgsodium_keymaker
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_decrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea) TO service_role;


--
-- Name: FUNCTION crypto_aead_det_encrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea); Type: ACL; Schema: pgsodium; Owner: pgsodium_keymaker
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_encrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea) TO service_role;


--
-- Name: FUNCTION crypto_aead_det_keygen(); Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_keygen() TO service_role;


--
-- Name: FUNCTION apply_rls(wal jsonb, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO supabase_realtime_admin;


--
-- Name: FUNCTION build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO postgres;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO anon;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO service_role;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO supabase_realtime_admin;


--
-- Name: FUNCTION "cast"(val text, type_ regtype); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO postgres;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO dashboard_user;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO anon;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO authenticated;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO service_role;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO supabase_realtime_admin;


--
-- Name: FUNCTION check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO postgres;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO anon;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO authenticated;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO service_role;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO supabase_realtime_admin;


--
-- Name: FUNCTION is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO postgres;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO anon;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO service_role;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO supabase_realtime_admin;


--
-- Name: FUNCTION list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO supabase_realtime_admin;


--
-- Name: FUNCTION quote_wal2json(entity regclass); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO postgres;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO anon;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO authenticated;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO service_role;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO supabase_realtime_admin;


--
-- Name: FUNCTION subscription_check_filters(); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO postgres;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO dashboard_user;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO anon;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO authenticated;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO service_role;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO supabase_realtime_admin;


--
-- Name: FUNCTION to_regrole(role_name text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO postgres;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO anon;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO authenticated;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO service_role;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO supabase_realtime_admin;


--
-- Name: FUNCTION topic(); Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON FUNCTION realtime.topic() TO postgres;
GRANT ALL ON FUNCTION realtime.topic() TO dashboard_user;


--
-- Name: FUNCTION can_insert_object(bucketid text, name text, owner uuid, metadata jsonb); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) TO postgres;


--
-- Name: FUNCTION extension(name text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.extension(name text) TO postgres;


--
-- Name: FUNCTION filename(name text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.filename(name text) TO postgres;


--
-- Name: FUNCTION foldername(name text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.foldername(name text) TO postgres;


--
-- Name: FUNCTION get_size_by_bucket(); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.get_size_by_bucket() TO postgres;


--
-- Name: FUNCTION list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, next_key_token text, next_upload_token text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, next_key_token text, next_upload_token text) TO postgres;


--
-- Name: FUNCTION list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, start_after text, next_token text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, start_after text, next_token text) TO postgres;


--
-- Name: FUNCTION operation(); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.operation() TO postgres;


--
-- Name: FUNCTION search(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.search(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) TO postgres;


--
-- Name: FUNCTION update_updated_at_column(); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.update_updated_at_column() TO postgres;


--
-- Name: TABLE audit_log_entries; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.audit_log_entries TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.audit_log_entries TO postgres;
GRANT SELECT ON TABLE auth.audit_log_entries TO postgres WITH GRANT OPTION;


--
-- Name: TABLE flow_state; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.flow_state TO postgres;
GRANT SELECT ON TABLE auth.flow_state TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.flow_state TO dashboard_user;


--
-- Name: TABLE identities; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.identities TO postgres;
GRANT SELECT ON TABLE auth.identities TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.identities TO dashboard_user;


--
-- Name: TABLE instances; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.instances TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.instances TO postgres;
GRANT SELECT ON TABLE auth.instances TO postgres WITH GRANT OPTION;


--
-- Name: TABLE mfa_amr_claims; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_amr_claims TO postgres;
GRANT SELECT ON TABLE auth.mfa_amr_claims TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_amr_claims TO dashboard_user;


--
-- Name: TABLE mfa_challenges; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_challenges TO postgres;
GRANT SELECT ON TABLE auth.mfa_challenges TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_challenges TO dashboard_user;


--
-- Name: TABLE mfa_factors; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_factors TO postgres;
GRANT SELECT ON TABLE auth.mfa_factors TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_factors TO dashboard_user;


--
-- Name: TABLE one_time_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.one_time_tokens TO postgres;
GRANT SELECT ON TABLE auth.one_time_tokens TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.one_time_tokens TO dashboard_user;


--
-- Name: TABLE refresh_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.refresh_tokens TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.refresh_tokens TO postgres;
GRANT SELECT ON TABLE auth.refresh_tokens TO postgres WITH GRANT OPTION;


--
-- Name: SEQUENCE refresh_tokens_id_seq; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO dashboard_user;
GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO postgres;


--
-- Name: TABLE saml_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.saml_providers TO postgres;
GRANT SELECT ON TABLE auth.saml_providers TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.saml_providers TO dashboard_user;


--
-- Name: TABLE saml_relay_states; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.saml_relay_states TO postgres;
GRANT SELECT ON TABLE auth.saml_relay_states TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.saml_relay_states TO dashboard_user;


--
-- Name: TABLE schema_migrations; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.schema_migrations TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.schema_migrations TO postgres;
GRANT SELECT ON TABLE auth.schema_migrations TO postgres WITH GRANT OPTION;


--
-- Name: TABLE sessions; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sessions TO postgres;
GRANT SELECT ON TABLE auth.sessions TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sessions TO dashboard_user;


--
-- Name: TABLE sso_domains; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sso_domains TO postgres;
GRANT SELECT ON TABLE auth.sso_domains TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sso_domains TO dashboard_user;


--
-- Name: TABLE sso_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sso_providers TO postgres;
GRANT SELECT ON TABLE auth.sso_providers TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sso_providers TO dashboard_user;


--
-- Name: TABLE users; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.users TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.users TO postgres;
GRANT SELECT ON TABLE auth.users TO postgres WITH GRANT OPTION;


--
-- Name: TABLE pg_stat_statements; Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON TABLE extensions.pg_stat_statements TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE extensions.pg_stat_statements TO dashboard_user;


--
-- Name: TABLE pg_stat_statements_info; Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON TABLE extensions.pg_stat_statements_info TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE extensions.pg_stat_statements_info TO dashboard_user;


--
-- Name: SEQUENCE seq_schema_version; Type: ACL; Schema: graphql; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE graphql.seq_schema_version TO postgres;
GRANT ALL ON SEQUENCE graphql.seq_schema_version TO anon;
GRANT ALL ON SEQUENCE graphql.seq_schema_version TO authenticated;
GRANT ALL ON SEQUENCE graphql.seq_schema_version TO service_role;


--
-- Name: TABLE decrypted_key; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON TABLE pgsodium.decrypted_key TO pgsodium_keyholder;


--
-- Name: TABLE masking_rule; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON TABLE pgsodium.masking_rule TO pgsodium_keyholder;


--
-- Name: TABLE mask_columns; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON TABLE pgsodium.mask_columns TO pgsodium_keyholder;


--
-- Name: TABLE analytics; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.analytics TO anon;
GRANT ALL ON TABLE public.analytics TO authenticated;
GRANT ALL ON TABLE public.analytics TO service_role;


--
-- Name: TABLE assignments; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.assignments TO anon;
GRANT ALL ON TABLE public.assignments TO authenticated;
GRANT ALL ON TABLE public.assignments TO service_role;


--
-- Name: SEQUENCE assignments_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.assignments_id_seq TO anon;
GRANT ALL ON SEQUENCE public.assignments_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.assignments_id_seq TO service_role;


--
-- Name: TABLE groups; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.groups TO anon;
GRANT ALL ON TABLE public.groups TO authenticated;
GRANT ALL ON TABLE public.groups TO service_role;


--
-- Name: SEQUENCE groups_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.groups_id_seq TO anon;
GRANT ALL ON SEQUENCE public.groups_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.groups_id_seq TO service_role;


--
-- Name: TABLE journal_assignments; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.journal_assignments TO anon;
GRANT ALL ON TABLE public.journal_assignments TO authenticated;
GRANT ALL ON TABLE public.journal_assignments TO service_role;


--
-- Name: SEQUENCE journal_assignments_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.journal_assignments_id_seq TO anon;
GRANT ALL ON SEQUENCE public.journal_assignments_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.journal_assignments_id_seq TO service_role;


--
-- Name: TABLE journal_entries; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.journal_entries TO anon;
GRANT ALL ON TABLE public.journal_entries TO authenticated;
GRANT ALL ON TABLE public.journal_entries TO service_role;


--
-- Name: SEQUENCE journal_entries_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.journal_entries_id_seq TO anon;
GRANT ALL ON SEQUENCE public.journal_entries_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.journal_entries_id_seq TO service_role;


--
-- Name: TABLE memberships; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.memberships TO anon;
GRANT ALL ON TABLE public.memberships TO authenticated;
GRANT ALL ON TABLE public.memberships TO service_role;


--
-- Name: TABLE password_reset; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.password_reset TO anon;
GRANT ALL ON TABLE public.password_reset TO authenticated;
GRANT ALL ON TABLE public.password_reset TO service_role;


--
-- Name: TABLE questions; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.questions TO anon;
GRANT ALL ON TABLE public.questions TO authenticated;
GRANT ALL ON TABLE public.questions TO service_role;


--
-- Name: SEQUENCE questions_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.questions_id_seq TO anon;
GRANT ALL ON SEQUENCE public.questions_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.questions_id_seq TO service_role;


--
-- Name: TABLE ratings; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.ratings TO anon;
GRANT ALL ON TABLE public.ratings TO authenticated;
GRANT ALL ON TABLE public.ratings TO service_role;


--
-- Name: TABLE reviews; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.reviews TO anon;
GRANT ALL ON TABLE public.reviews TO authenticated;
GRANT ALL ON TABLE public.reviews TO service_role;


--
-- Name: SEQUENCE reviews_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.reviews_id_seq TO anon;
GRANT ALL ON SEQUENCE public.reviews_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.reviews_id_seq TO service_role;


--
-- Name: TABLE users; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.users TO anon;
GRANT ALL ON TABLE public.users TO authenticated;
GRANT ALL ON TABLE public.users TO service_role;


--
-- Name: SEQUENCE users_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.users_id_seq TO anon;
GRANT ALL ON SEQUENCE public.users_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.users_id_seq TO service_role;


--
-- Name: TABLE workspaces; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.workspaces TO anon;
GRANT ALL ON TABLE public.workspaces TO authenticated;
GRANT ALL ON TABLE public.workspaces TO service_role;


--
-- Name: SEQUENCE workspaces_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.workspaces_id_seq TO anon;
GRANT ALL ON SEQUENCE public.workspaces_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.workspaces_id_seq TO service_role;


--
-- Name: TABLE messages; Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON TABLE realtime.messages TO postgres;
GRANT ALL ON TABLE realtime.messages TO dashboard_user;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO anon;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO authenticated;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO service_role;


--
-- Name: SEQUENCE messages_id_seq; Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON SEQUENCE realtime.messages_id_seq TO postgres;
GRANT ALL ON SEQUENCE realtime.messages_id_seq TO dashboard_user;
GRANT USAGE ON SEQUENCE realtime.messages_id_seq TO anon;
GRANT USAGE ON SEQUENCE realtime.messages_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE realtime.messages_id_seq TO service_role;


--
-- Name: TABLE schema_migrations; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.schema_migrations TO postgres;
GRANT ALL ON TABLE realtime.schema_migrations TO dashboard_user;
GRANT SELECT ON TABLE realtime.schema_migrations TO anon;
GRANT SELECT ON TABLE realtime.schema_migrations TO authenticated;
GRANT SELECT ON TABLE realtime.schema_migrations TO service_role;
GRANT ALL ON TABLE realtime.schema_migrations TO supabase_realtime_admin;


--
-- Name: TABLE subscription; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.subscription TO postgres;
GRANT ALL ON TABLE realtime.subscription TO dashboard_user;
GRANT SELECT ON TABLE realtime.subscription TO anon;
GRANT SELECT ON TABLE realtime.subscription TO authenticated;
GRANT SELECT ON TABLE realtime.subscription TO service_role;
GRANT ALL ON TABLE realtime.subscription TO supabase_realtime_admin;


--
-- Name: SEQUENCE subscription_id_seq; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO postgres;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO dashboard_user;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO anon;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO service_role;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO supabase_realtime_admin;


--
-- Name: TABLE buckets; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.buckets TO anon;
GRANT ALL ON TABLE storage.buckets TO authenticated;
GRANT ALL ON TABLE storage.buckets TO service_role;
GRANT ALL ON TABLE storage.buckets TO postgres;


--
-- Name: TABLE migrations; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.migrations TO anon;
GRANT ALL ON TABLE storage.migrations TO authenticated;
GRANT ALL ON TABLE storage.migrations TO service_role;
GRANT ALL ON TABLE storage.migrations TO postgres;


--
-- Name: TABLE objects; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.objects TO anon;
GRANT ALL ON TABLE storage.objects TO authenticated;
GRANT ALL ON TABLE storage.objects TO service_role;
GRANT ALL ON TABLE storage.objects TO postgres;


--
-- Name: TABLE s3_multipart_uploads; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.s3_multipart_uploads TO service_role;
GRANT SELECT ON TABLE storage.s3_multipart_uploads TO authenticated;
GRANT SELECT ON TABLE storage.s3_multipart_uploads TO anon;
GRANT ALL ON TABLE storage.s3_multipart_uploads TO postgres;


--
-- Name: TABLE s3_multipart_uploads_parts; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.s3_multipart_uploads_parts TO service_role;
GRANT SELECT ON TABLE storage.s3_multipart_uploads_parts TO authenticated;
GRANT SELECT ON TABLE storage.s3_multipart_uploads_parts TO anon;
GRANT ALL ON TABLE storage.s3_multipart_uploads_parts TO postgres;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON TABLES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON SEQUENCES  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON FUNCTIONS  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON TABLES  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: pgsodium; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium GRANT ALL ON SEQUENCES  TO pgsodium_keyholder;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: pgsodium; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium GRANT ALL ON TABLES  TO pgsodium_keyholder;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON SEQUENCES  TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON FUNCTIONS  TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON TABLES  TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON TABLES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO service_role;


--
-- Name: issue_graphql_placeholder; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_graphql_placeholder ON sql_drop
         WHEN TAG IN ('DROP EXTENSION')
   EXECUTE FUNCTION extensions.set_graphql_placeholder();


ALTER EVENT TRIGGER issue_graphql_placeholder OWNER TO supabase_admin;

--
-- Name: issue_pg_cron_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_cron_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_cron_access();


ALTER EVENT TRIGGER issue_pg_cron_access OWNER TO supabase_admin;

--
-- Name: issue_pg_graphql_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_graphql_access ON ddl_command_end
         WHEN TAG IN ('CREATE FUNCTION')
   EXECUTE FUNCTION extensions.grant_pg_graphql_access();


ALTER EVENT TRIGGER issue_pg_graphql_access OWNER TO supabase_admin;

--
-- Name: issue_pg_net_access; Type: EVENT TRIGGER; Schema: -; Owner: postgres
--

CREATE EVENT TRIGGER issue_pg_net_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_net_access();


ALTER EVENT TRIGGER issue_pg_net_access OWNER TO postgres;

--
-- Name: pgrst_ddl_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_ddl_watch ON ddl_command_end
   EXECUTE FUNCTION extensions.pgrst_ddl_watch();


ALTER EVENT TRIGGER pgrst_ddl_watch OWNER TO supabase_admin;

--
-- Name: pgrst_drop_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_drop_watch ON sql_drop
   EXECUTE FUNCTION extensions.pgrst_drop_watch();


ALTER EVENT TRIGGER pgrst_drop_watch OWNER TO supabase_admin;

--
-- PostgreSQL database dump complete
--

--
-- PostgreSQL database cluster dump complete
--

